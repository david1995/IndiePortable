<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IndiePortable.AdvancedTasks</name>
    </assembly>
    <members>
        <member name="T:IndiePortable.AdvancedTasks.ExceptionThrownEventArgs">
            <summary>
            Provides event information for an event concerning a thrown exception.
            </summary>
            <seealso cref="T:System.EventArgs" />
        </member>
        <member name="F:IndiePortable.AdvancedTasks.ExceptionThrownEventArgs.thrownExceptionBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.AdvancedTasks.ExceptionThrownEventArgs.ThrownException" /> property.
            </summary>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.ExceptionThrownEventArgs.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.AdvancedTasks.ExceptionThrownEventArgs" /> class.
            </summary>
            <param name="thrownException">
                The <see cref="T:System.Exception" /> that has been thrown.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="thrownException" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="P:IndiePortable.AdvancedTasks.ExceptionThrownEventArgs.ThrownException">
            <summary>
            Gets the <see cref="T:System.Exception" /> that has been thrown.
            </summary>
            <value>
                Contains the <see cref="T:System.Exception" /> that has been thrown.
            </value>
        </member>
        <member name="T:IndiePortable.AdvancedTasks.ITaskConnection">
            <summary>
            Represents the connection to a task.
            </summary>
        </member>
        <member name="P:IndiePortable.AdvancedTasks.ITaskConnection.MustFinish">
            <summary>
            Gets a value indicating whether the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> must finish.
            </summary>
            <value>
                <c>true</c> if the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> must finish; otherwise <c>false</c>.
            </value>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.ITaskConnection.Stop">
            <summary>
            Tells the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> to stop.
            </summary>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.ITaskConnection.Await">
            <summary>
            Waits until the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> returns.
            If the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> has already finished, the call immediately returns.
            </summary>
            <remarks>
                <para>
                    If the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.Return" /> method or the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.ThrowException(System.Exception)" /> method
                    is never called by the task method,
                    calls to the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.Await" /> method will never return.
                </para>
            </remarks>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.ITaskConnection.AwaitAsync">
            <summary>
            Waits until the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> returns asynchronously.
            If the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> has already finished, the call immediately returns.
            </summary>
            <returns>
                Returns the executing <see cref="T:System.Threading.Tasks.Task" />.
            </returns>
            <remarks>
                <para>
                    If the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.Return" /> method or the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.ThrowException(System.Exception)" /> method
                    is never called by the task method,
                    calls to the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.AwaitAsync" /> method will never return.
                </para>
            </remarks>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.ITaskConnection.TryAwait">
            <summary>
            Waits until the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> returns.
            If the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> has already finished, the call immediately returns.
            </summary>
            <returns>
                <c>true</c> if no exception has been thrown; otherwise <c>false</c>.
            </returns>
            <remarks>
                <para>
                    If the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.Return" /> method or the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.ThrowException(System.Exception)" /> method
                    is never called by the task method,
                    calls to the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.TryAwait" /> method will never return.
                </para>
            </remarks>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.ITaskConnection.TryAwaitAsync">
            <summary>
            Waits until the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> returns.
            If the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> has already finished, the call immediately returns.
            </summary>
            <returns>
                <c>true</c> if no exception has been thrown; otherwise <c>false</c>.
            </returns>
            <remarks>
                <para>
                    If the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.Return" /> method or the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.ThrowException(System.Exception)" /> method
                    is never called by the task method,
                    calls to the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.TryAwaitAsync" /> method will never return.
                </para>
            </remarks>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.ITaskConnection.Return">
            <summary>
            Signals that the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> has finished his work.
            </summary>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.ITaskConnection.ThrowException(System.Exception)">
            <summary>
            Notifies the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> of a thrown exception.
            </summary>
            <param name="exc">
                The thrown <see cref="T:System.Exception" />.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="exc" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="T:IndiePortable.AdvancedTasks.ITaskConnection`1">
            <summary>
            Represents the connection to a <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" />.
            </summary>
            <typeparam name="T">
                The type of the state object that can be passed to the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" />.
            </typeparam>
            <remarks>
                <para>
                    The <see cref="T:IndiePortable.AdvancedTasks.ITaskConnection`1" /> interface is deprecated. Use the <see cref="T:IndiePortable.AdvancedTasks.ITaskConnection" /> interface instead.
                </para>
            </remarks>
        </member>
        <member name="P:IndiePortable.AdvancedTasks.ITaskConnection`1.MustFinish">
            <summary>
            Gets a value indicating whether the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> must finish.
            </summary>
            <value>
                <c>true</c> if the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> must finish; otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:IndiePortable.AdvancedTasks.ITaskConnection`1.StateObject">
            <summary>
            Gets the state object passed to the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" />.
            </summary>
            <value>
                Contains the state object passed to the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" />.
            </value>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.ITaskConnection`1.Stop">
            <summary>
            Tells the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> to stop.
            </summary>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.ITaskConnection`1.WaitForReturn">
            <summary>
            Waits until the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> returns.
            If the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> has already finished, the call immediately returns.
            </summary>
            <remarks>
                <para>
                    If the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection`1.Return" /> method is never called by the task method,
                    calls to the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection`1.WaitForReturn" /> method will never return.
                </para>
            </remarks>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.ITaskConnection`1.WaitForReturnAsync">
            <summary>
            Waits until the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> returns asynchronously.
            If the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> has already finished, the call immediately returns.
            </summary>
            <remarks>
                <para>
                    If the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection`1.Return" /> method is never called by the task method,
                    calls to the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection`1.WaitForReturnAsync" /> method will never return.
                </para>
            </remarks>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.ITaskConnection`1.Return">
            <summary>
            Signals that the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> has finished his work.
            </summary>
        </member>
        <member name="T:IndiePortable.AdvancedTasks.StateTask">
            <summary>
            Wraps a <see cref="T:System.Threading.Tasks.Task" /> that is destined to a long life span.
            </summary>
        </member>
        <member name="F:IndiePortable.AdvancedTasks.StateTask.connection">
            <summary>
            Represents the communication connection to the <see cref="T:IndiePortable.AdvancedTasks.StateTask" />.
            </summary>
        </member>
        <member name="F:IndiePortable.AdvancedTasks.StateTask.task">
            <summary>
            The <see cref="T:System.Threading.Tasks.Task" /> that is wrapped by the <see cref="T:IndiePortable.AdvancedTasks.StateTask" />.
            </summary>
        </member>
        <member name="F:IndiePortable.AdvancedTasks.StateTask.currentStateBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.AdvancedTasks.StateTask.CurrentState" /> property.
            </summary>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.StateTask.#ctor(System.Action{IndiePortable.AdvancedTasks.ITaskConnection})">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> class.
            </summary>
            <param name="method">
                The method the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> shall process.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="method" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="E:IndiePortable.AdvancedTasks.StateTask.Returned">
            <summary>
            Raised when the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> has returned.
            </summary>
        </member>
        <member name="E:IndiePortable.AdvancedTasks.StateTask.ExceptionThrown">
            <summary>
            Raised when an <see cref="T:System.Exception" /> has been thrown during the execution of the <see cref="T:IndiePortable.AdvancedTasks.StateTask" />.
            </summary>
        </member>
        <member name="P:IndiePortable.AdvancedTasks.StateTask.CurrentState">
            <summary>
            Gets the current state of the <see cref="T:IndiePortable.AdvancedTasks.StateTask" />.
            </summary>
            <value>
                Contains the current state of the <see cref="T:IndiePortable.AdvancedTasks.StateTask" />.
            </value>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.StateTask.Stop">
            <summary>
            Signals the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> to stop.
            </summary>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.StateTask.StopAndAwait">
            <summary>
            Signals the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> to stop and waits until the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> returns.
            If the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> has already finished, the call immediately returns.
            </summary>
            <remarks>
                <para>
                    If the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.Return" /> method or the
                    <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.ThrowException(System.Exception)" /> method is never called by the task method,
                    calls to the <see cref="M:IndiePortable.AdvancedTasks.StateTask.StopAndAwait" /> method will never return.
                </para>
            </remarks>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.StateTask.StopAndAwaitAsync">
            <summary>
            Signals the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> to stop and waits until the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> returns asynchronously.
            If the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> has already finished, the call immediately returns.
            </summary>
            <returns>
                Returns the executing <see cref="T:System.Threading.Tasks.Task" />.
            </returns>
            <remarks>
                <para>
                    If the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.Return" /> method or the
                    <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.ThrowException(System.Exception)" /> method is never called by the task method,
                    calls to the <see cref="M:IndiePortable.AdvancedTasks.StateTask.StopAndAwaitAsync" /> method will never return.
                </para>
            </remarks>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.StateTask.Await">
            <summary>
            Waits until the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> returns.
            If the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> has already finished, the call immediately returns.
            </summary>
            <remarks>
                <para>
                    If the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.Return" /> method or the
                    <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.ThrowException(System.Exception)" /> method is never called by the task method,
                    calls to the <see cref="M:IndiePortable.AdvancedTasks.StateTask.Await" /> method will never return.
                </para>
            </remarks>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.StateTask.AwaitAsync">
            <summary>
            Waits until the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> returns asynchronously.
            If the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> has already finished, the call immediately returns.
            </summary>
            <returns>
                Returns the executing <see cref="T:System.Threading.Tasks.Task" />.
            </returns>
            <remarks>
                <para>
                    If the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.Return" /> method or the
                    <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.ThrowException(System.Exception)" /> method is never called by the task method,
                    calls to the <see cref="M:IndiePortable.AdvancedTasks.StateTask.Await" /> method will never return.
                </para>
            </remarks>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.StateTask.TryAwait">
            <summary>
            Waits until the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> returns.
            If the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> has already finished, the call immediately returns.
            </summary>
            <returns>
                <c>true</c> if no exception has been thrown; otherwise <c>false</c>.
            </returns>
            <remarks>
                <para>
                    If the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.Return" /> method or the
                    <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.ThrowException(System.Exception)" /> method is never called by the task method,
                    calls to the <see cref="M:IndiePortable.AdvancedTasks.StateTask.TryAwait" /> method will never return.
                </para>
            </remarks>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.StateTask.TryAwaitAsync">
            <summary>
            Waits until the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> returns asynchronously.
            If the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> has already finished, the call immediately returns.
            </summary>
            <returns>
                <c>true</c> if no exception has been thrown; otherwise <c>false</c>.
            </returns>
            <remarks>
                <para>
                    If the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.Return" /> method or the
                    <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection.ThrowException(System.Exception)" /> method is never called by the task method,
                    calls to the <see cref="M:IndiePortable.AdvancedTasks.StateTask.TryAwaitAsync" /> method will never return.
                </para>
            </remarks>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.StateTask.RaiseReturned">
            <summary>
            Raises the <see cref="E:IndiePortable.AdvancedTasks.StateTask.Returned" /> event.
            </summary>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.StateTask.RaiseExceptionThrown(System.Exception)">
            <summary>
            Raises the <see cref="E:IndiePortable.AdvancedTasks.StateTask.ExceptionThrown" /> event.
            </summary>
            <param name="exc">
                The <see cref="T:System.Exception" /> that has been thrown.
            </param>
        </member>
        <member name="T:IndiePortable.AdvancedTasks.StateTask.TaskConnection">
            <summary>
            Represents the connection to the method of the wrapped <see cref="T:System.Threading.Tasks.Task" />.
            </summary>
            <seealso cref="T:IndiePortable.AdvancedTasks.ITaskConnection" />
        </member>
        <member name="F:IndiePortable.AdvancedTasks.StateTask.TaskConnection.waitHandle">
            <summary>
            The <see cref="T:System.Threading.ManualResetEventSlim" /> used to block for the <see cref="M:IndiePortable.AdvancedTasks.StateTask.TaskConnection.Await" /> method family.
            </summary>
        </member>
        <member name="F:IndiePortable.AdvancedTasks.StateTask.TaskConnection.task">
            <summary>
            The <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> using this <see cref="T:IndiePortable.AdvancedTasks.StateTask.TaskConnection" /> instance.
            </summary>
        </member>
        <member name="F:IndiePortable.AdvancedTasks.StateTask.TaskConnection.mustFinishBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.AdvancedTasks.StateTask.TaskConnection.MustFinish" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.AdvancedTasks.StateTask.TaskConnection.thrownException">
            <summary>
            The <see cref="T:System.Exception" /> that has been thrown, or <c>null</c> if no exception has been thrown.
            </summary>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.StateTask.TaskConnection.#ctor(IndiePortable.AdvancedTasks.StateTask)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.AdvancedTasks.StateTask.TaskConnection"/> class.
            </summary>
            <param name="task">
                The <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> using the <see cref="T:IndiePortable.AdvancedTasks.StateTask.TaskConnection" /> instance.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="task" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="P:IndiePortable.AdvancedTasks.StateTask.TaskConnection.MustFinish">
            <summary>
            Gets a value indicating whether the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> must finish.
            </summary>
            <value>
                <c>true</c> if the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> must finish; otherwise <c>false</c>.
            </value>
            <remarks>
                <para>Implements <see cref="P:IndiePortable.AdvancedTasks.ITaskConnection.MustFinish" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.StateTask.TaskConnection.Return">
            <summary>
            Signals that the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> has finished its work.
            </summary>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.StateTask.TaskConnection.ThrowException(System.Exception)">
            <summary>
            Notifies the <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> of a thrown exception.
            </summary>
            <param name="exc">
                The thrown <see cref="T:System.Exception" />.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="exc" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="T:IndiePortable.AdvancedTasks.StateTask`1">
            <summary>
            Represents a task that provides a state for communicating with the task.
            </summary>
            <typeparam name="T">
                The type of the state object.
            </typeparam> 
            <remarks>
                <para>
                    This task is only recommended for tasks that are expected to have a long active period of time.
                    For tasks with a short active period, the direct usage of the <see cref="T:System.Threading.Tasks.Task" /> class is more suitable.
                </para>
            </remarks>
        </member>
        <member name="F:IndiePortable.AdvancedTasks.StateTask`1.connection">
            <summary>
            Represents the communication connection to the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" />.
            </summary>
        </member>
        <member name="F:IndiePortable.AdvancedTasks.StateTask`1.task">
            <summary>
            The <see cref="T:System.Threading.Tasks.Task" /> that is wrapped by the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" />.
            </summary>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.StateTask`1.#ctor(System.Action{IndiePortable.AdvancedTasks.ITaskConnection{`0}})">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> class.
            </summary>
            <param name="method">
                The method the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> shall process.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="method" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="E:IndiePortable.AdvancedTasks.StateTask`1.Returned">
            <summary>
            Raised when the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> has returned.
            </summary>
        </member>
        <member name="P:IndiePortable.AdvancedTasks.StateTask`1.StateObject">
            <summary> 
            Gets or sets the state object that is passed to the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" />. 
            </summary> 
            <value> 
                Contains the state object that is passed to the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" />. 
            </value> 
        </member>
        <member name="M:IndiePortable.AdvancedTasks.StateTask`1.Stop">
            <summary>
            Signals the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> to stop.
            </summary>
        </member>
        <member name="M:IndiePortable.AdvancedTasks.StateTask`1.StopAndWait">
            <summary>
            Signals the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> to stop and waits until the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> returns. 
            If the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> has already finished, the call immediately returns. 
            </summary> 
            <remarks> 
                <para> 
                    If the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection`1.Return" /> method is never called by the task method, 
                    calls to the <see cref="M:IndiePortable.AdvancedTasks.StateTask`1.StopAndWait" /> method will never return. 
                </para> 
            </remarks> 
        </member>
        <member name="M:IndiePortable.AdvancedTasks.StateTask`1.StopAndWaitAsync">
            <summary> 
            Signals the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> to stop and waits until the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> returns asynchronously. 
            If the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> has already finished, the call immediately returns. 
            </summary> 
            <remarks> 
                <para> 
                    If the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection`1.Return" /> method is never called by the task method, 
                    calls to the <see cref="M:IndiePortable.AdvancedTasks.StateTask`1.StopAndWaitAsync" /> method will never return. 
                </para> 
            </remarks> 
        </member>
        <member name="M:IndiePortable.AdvancedTasks.StateTask`1.WaitForReturn">
            <summary> 
            Waits until the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> returns. 
            If the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> has already finished, the call immediately returns. 
            </summary> 
            <remarks> 
                <para> 
                    If the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection`1.Return" /> method is never called by the task method, 
                    calls to the <see cref="M:IndiePortable.AdvancedTasks.StateTask`1.WaitForReturn" /> method will never return. 
                </para> 
            </remarks> 
        </member>
        <member name="M:IndiePortable.AdvancedTasks.StateTask`1.WaitForReturnAsync">
            <summary> 
            Waits until the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> returns asynchronously. 
            If the <see cref="T:IndiePortable.AdvancedTasks.StateTask`1" /> has already finished, the call immediately returns. 
            </summary> 
            <remarks> 
                <para> 
                    If the <see cref="M:IndiePortable.AdvancedTasks.ITaskConnection`1.Return" /> method is never called by the task method, 
                    calls to the <see cref="M:IndiePortable.AdvancedTasks.StateTask`1.WaitForReturnAsync" /> method will never return. 
                </para> 
            </remarks> 
        </member>
        <member name="T:IndiePortable.AdvancedTasks.TaskState">
            <summary>
            Provides information about the state of a task.
            </summary>
        </member>
        <member name="F:IndiePortable.AdvancedTasks.TaskState.NotStarted">
            <summary>
            Indicates that a <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> has not been started.
            </summary>
        </member>
        <member name="F:IndiePortable.AdvancedTasks.TaskState.Started">
            <summary>
            Indicates that a <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> has been started.
            </summary>
        </member>
        <member name="F:IndiePortable.AdvancedTasks.TaskState.Finished">
            <summary>
            Indicates that a <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> has finished successfully.
            </summary>
        </member>
        <member name="F:IndiePortable.AdvancedTasks.TaskState.ExceptionThrown">
            <summary>
            Indicates that a <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> has thrown an exception.
            </summary>
        </member>
    </members>
</doc>
