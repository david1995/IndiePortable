<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IndiePortable.Communication.NetClassic</name>
    </assembly>
    <members>
        <member name="T:IndiePortable.Communication.NetClassic.RsaCryptoManager">
            <summary>
            Encapsulates properties and methods for en- and decrypting bytes with RSA encryption.
            </summary>
            <seealso cref="T:IndiePortable.Communication.EncryptedConnection.CryptoManagerBase`1" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.RsaCryptoManager.remoteRSA">
            <summary>
            The object responsible for decrypting data.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.RsaCryptoManager.localRSA">
            <summary>
            The object responsible for encrypting data.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.RsaCryptoManager.localPublicKeyBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Communication.NetClassic.RsaCryptoManager.LocalPublicKey" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.RsaCryptoManager.isSessionStartedBacking">
            <summary>
            The backing field for the <seealso cref="P:IndiePortable.Communication.NetClassic.RsaCryptoManager.IsSessionStarted" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.RsaCryptoManager.remotePublicKey">
            <summary>
            The remote public key information.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.RsaCryptoManager.isDisposed">
            <summary>
            Indicates whether the <see cref="T:IndiePortable.Communication.NetClassic.RsaCryptoManager" /> is disposed.
            </summary>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.RsaCryptoManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Communication.NetClassic.RsaCryptoManager" /> class.
            </summary>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.RsaCryptoManager.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Communication.NetClassic.RsaCryptoManager"/> class.
            </summary>
            <param name="rsaKeyPairBlob">
                The blob representing the RSA key pair.
                Must not be <c>null</c>.
                Must be formatted complying the Cryptographic API format.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="rsaKeyPairBlob" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="P:IndiePortable.Communication.NetClassic.RsaCryptoManager.IsSessionStarted">
            <summary>
            Gets a value indicating whether the <see cref="T:IndiePortable.Communication.NetClassic.RsaCryptoManager" /> has started an encryption session.
            </summary>
            <value>
                <c>true</c> if the <see cref="T:IndiePortable.Communication.NetClassic.RsaCryptoManager" /> has started an encryption session; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IndiePortable.Communication.NetClassic.RsaCryptoManager.LocalPublicKey">
            <summary>
            Gets the public key of the local client.
            </summary>
            <value>
                Contains the public key of the local client.
            </value>
            <remarks>
                <para>Overrides <see cref="P:IndiePortable.Communication.EncryptedConnection.CryptoManagerBase`1.LocalPublicKey" />.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.RsaCryptoManager.ExportLocalKeyPair(System.IO.Stream)">
            <summary>
            Exports the local key pair.
            </summary>
            <param name="output">The output.</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.RsaCryptoManager.StartSession(IndiePortable.Communication.EncryptedConnection.PublicKeyInfo)">
            <summary>
            Starts an encryption session.
            </summary>
            <param name="remotePublicKey">
                The public key of the remote client.
            </param>
            <exception cref="T:System.InvalidOperationException">
                <para>
                    Thrown if the <see cref="T:IndiePortable.Communication.NetClassic.RsaCryptoManager" /> has already started an encryption session.
                    Check the <see cref="P:IndiePortable.Communication.NetClassic.RsaCryptoManager.IsSessionStarted" /> property.
                </para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.RsaCryptoManager.Encrypt(System.Byte[])">
            <summary>
            Encrypts the specified data by using the RSA algorithm.
            </summary>
            <param name="data">
                The data that shall be encrypted.
                Must not be <c>null</c>.
            </param>
            <returns>
                The encrypted data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="data" /> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if the session has not been started. Check the <see cref="P:IndiePortable.Communication.NetClassic.RsaCryptoManager.IsSessionStarted" /> property.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.RsaCryptoManager.Decrypt(System.Byte[])">
            <summary>
            Decrypts the specified data by using the RSA algorithm.
            </summary>
            <param name="data">
                The data that shall be encrypted.
                Must not be <c>null</c>.
            </param>
            <returns>
                The decrypted data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="data" /> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if the session has not been started. Check the <see cref="P:IndiePortable.Communication.NetClassic.RsaCryptoManager.IsSessionStarted" /> property.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.RsaCryptoManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:IndiePortable.Communication.NetClassic.TcpConnection">
            <summary>
            Represents one end of a connection using the TCP protocol.
            </summary>
            <seealso cref="T:IndiePortable.Communication.EncryptedConnection.ICryptableConnection`1" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnection.DefaultKeepAliveFrequency">
            <summary>
            Contains the default keep alive frequency of the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" /> of 5 seconds.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnection.DefaultMaxKeepAliveTimeout">
            <summary>
            Contains the default maximum keep alive timeout of the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" /> of 10 seconds.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnection.cacheBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Communication.NetClassic.TcpConnection.Cache" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnection.remoteAddressBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Communication.NetClassic.TcpConnection.RemoteAddress" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnection.keepAliveFrequencyBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Communication.NetClassic.TcpConnection.KeepAliveFrequency" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnection.maxKeepAliveTimeoutBacking">
            <summary>
            The backing field fort he <see cref="P:IndiePortable.Communication.NetClassic.TcpConnection.MaxKeepAliveTimeout" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnection.isDisposed">
            <summary>
            Determines whether the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" /> is disposed.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnection.isConnectedBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Communication.NetClassic.TcpConnection.IsConnected" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnection.isActivatedBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Communication.NetClassic.TcpConnection.IsActivated" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnection.isSessionEncryptedBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Communication.NetClassic.TcpConnection.IsSessionEncrypted" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnection.messageReaderTask">
            <summary>
            The <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> reading messages from the TCP stream.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnection.keepAliveCheckerTask">
            <summary>
            The <see cref="T:IndiePortable.AdvancedTasks.StateTask" /> checking whether the communication partner is connected.
            </summary>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnection.#ctor(System.Net.Sockets.TcpClient,IndiePortable.Communication.Tcp.IPPortAddressInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection"/> class.
            </summary>
            <param name="client">
                The <see cref="T:System.Net.Sockets.TcpClient" /> providing I/O operations for the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" />.
                Must not be <c>null</c>.
            </param>
            <param name="remoteAddress">
                The address of the remote host.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if at least one of the following conditions applies:</para>
                <list type="bullet">
                    <item><paramref name="client" /> is <c>null</c>.</item>
                    <item><paramref name="remoteAddress" /> is <c>null</c>.</item>
                </list>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnection.#ctor(System.Net.Sockets.TcpClient,IndiePortable.Communication.Tcp.IPPortAddressInfo,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" /> class.
            </summary>
            <param name="client">The client.</param>
            <param name="remoteAddress">The remote address.</param>
            <param name="keepAliveFrequency">The keep alive frequency.</param>
            <param name="maxKeepAliveTimeout">The maximum keep alive timeout.</param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if at least one of the following conditions applies:</para>
                <list type="bullet">
                    <item><paramref name="client" /> is <c>null</c>.</item>
                    <item><paramref name="remoteAddress" /> is <c>null</c>.</item>
                </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>Thrown if at least one of the following conditions applies:</para>
                <list type="bullet">
                    <item><paramref name="keepAliveFrequency" /> is <c>null</c>.</item>
                    <item><paramref name="maxKeepAliveTimeout" /> is <c>null</c>.</item>
                </list>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnection.#ctor(System.Net.Sockets.TcpClient,IndiePortable.Communication.Tcp.IPPortAddressInfo,IndiePortable.Communication.EncryptedConnection.CryptoManagerBase{IndiePortable.Communication.EncryptedConnection.PublicKeyInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection"/> class.
            </summary>
            <param name="client">
                The <see cref="T:System.Net.Sockets.TcpClient" /> providing I/O operations for the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" />.
                Must not be <c>null</c>.
            </param>
            <param name="remoteAddress">
                The address of the remote host.
                Must not be <c>null</c>.
            </param>
            <param name="cryptoManager">
                The <see cref="T:IndiePortable.Communication.EncryptedConnection.CryptoManagerBase`1" /> managing the encryption and decryption of messages.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if at least one of the following conditions applies:</para>
                <list type="bullet">
                    <item><paramref name="client" /> is <c>null</c>.</item>
                    <item><paramref name="remoteAddress" /> is <c>null</c>.</item>
                    <item><paramref name="cryptoManager" /> is <c>null</c>.</item>
                </list>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnection.#ctor(System.Net.Sockets.TcpClient,IndiePortable.Communication.Tcp.IPPortAddressInfo,IndiePortable.Communication.EncryptedConnection.CryptoManagerBase{IndiePortable.Communication.EncryptedConnection.PublicKeyInfo},System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection"/> class.
            </summary>
            <param name="client">
                The <see cref="T:System.Net.Sockets.TcpClient" /> providing I/O operations for the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" />.
                Must not be <c>null</c>.
            </param>
            <param name="remoteAddress">
                The address of the remote host.
                Must not be <c>null</c>.
            </param>
            <param name="cryptoManager">
                The <see cref="T:IndiePortable.Communication.EncryptedConnection.CryptoManagerBase`1" /> managing the encryption and decryption of messages.
                Must not be <c>null</c>.
            </param>
            <param name="keepAliveFrequency">
                The interval of sending keep-alive messages.
                Must be greater than <see cref="F:System.TimeSpan.Zero" />.
            </param>
            <param name="maxKeepAliveTimeout">
                The maximum acceptable interval between sending two keep-alive messages.
                Must be greater than <paramref name="keepAliveFrequency" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if at least one of the following conditions applies:</para>
                <list type="bullet">
                    <item><paramref name="client" /> is <c>null</c>.</item>
                    <item><paramref name="remoteAddress" /> is <c>null</c>.</item>
                    <item><paramref name="cryptoManager" /> is <c>null</c>.</item>
                </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>Thrown if at least one of the following conditions applies:</para>
                <list type="bullet">
                    <item><paramref name="keepAliveFrequency" /> is <c>null</c>.</item>
                    <item><paramref name="maxKeepAliveTimeout" /> is <c>null</c>.</item>
                </list>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnection.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection"/> class.
            </summary>
        </member>
        <member name="E:IndiePortable.Communication.NetClassic.TcpConnection.MessageReceived">
            <summary>
            Raised when a <see cref="T:IndiePortable.Communication.Messages.MessageBase" /> object has been received.
            </summary>
            <remarks>
                <para>Implements <see cref="E:IndiePortable.Communication.Devices.IMessageReceiver.MessageReceived" /> implicitly.</para>
            </remarks>
        </member>
        <member name="E:IndiePortable.Communication.NetClassic.TcpConnection.ConnectionMessageReceived">
            <summary>
            Raised when a <see cref="T:IndiePortable.Communication.Devices.ConnectionMessages.ConnectionMessageBase" /> has been received.
            </summary>
            <remarks>
                <para>Implements <see cref="E:IndiePortable.Communication.Devices.IConnection`1.ConnectionMessageReceived" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Communication.NetClassic.TcpConnection.Cache">
            <summary>
            Gets the <see cref="T:IndiePortable.Communication.Devices.MessageDispatcher" /> acting as a message cache.
            </summary>
            <value>
                Contains the <see cref="T:IndiePortable.Communication.Devices.MessageDispatcher" /> acting as a message cache.
            </value>
            <remarks>
                <para>Implements <see cref="P:IndiePortable.Communication.Devices.IMessageReceiver.Cache" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Communication.NetClassic.TcpConnection.IsActivated">
            <summary>
            Gets a value indicating whether the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" /> is activated.
            </summary>
            <value>
            <c>true</c> if the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" /> is activated; otherwise, <c>false</c>.
            </value>
            <remarks>
                <para>
                    Messages can only be sent or received if <see cref="P:IndiePortable.Communication.NetClassic.TcpConnection.IsActivated" /> is <c>true</c>.
                    Otherwise, an <see cref="T:System.InvalidOperationException" /> will be thrown.
                </para>
                <para>Implements <see cref="P:IndiePortable.Communication.Devices.IConnection`1.IsActivated" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Communication.NetClassic.TcpConnection.IsConnected">
            <summary>
            Gets a value indicating whether the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" /> is connected to the other end.
            </summary>
            <value>
                <c>true</c> if the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" /> is connected; otherwise, <c>false</c>.
            </value>
            <remarks>
                <para>Implements <see cref="P:IndiePortable.Communication.Devices.IConnection`1.IsConnected" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Communication.NetClassic.TcpConnection.IsSessionEncrypted">
            <summary>
            Gets a value indicating whether the current connection session is session encrypted.
            </summary>
            <value>
                <c>true</c> if the current connection session is encrypted; otherwise, <c>false</c>.
            </value>
            <remarks>
                <para>Implements <see cref="P:IndiePortable.Communication.EncryptedConnection.ICryptableConnection`1.IsSessionEncrypted" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Communication.NetClassic.TcpConnection.RemoteAddress">
            <summary>
            Gets the remote address of the other connection end.
            </summary>
            <value>
                Contains the remote address of the other connection end.
            </value>
            <remarks>
                <para>Implements <see cref="P:IndiePortable.Communication.Devices.IConnection`1.RemoteAddress" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Communication.NetClassic.TcpConnection.KeepAliveFrequency">
            <summary>
            Gets the interval of sending keep-alive messages.
            </summary>
            <value>
                Contains the interval of sending keep-alive messages.
            </value>
        </member>
        <member name="P:IndiePortable.Communication.NetClassic.TcpConnection.MaxKeepAliveTimeout">
            <summary>
            Gets the maximum acceptable interval between sending two keep-alive messages.
            </summary>
            <value>
                Contains the maximum acceptable interval between sending two keep-alive messages.
            </value>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnection.Activate">
            <summary>
            Activates the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" />.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                <para>
                    Thrown if the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" /> has already been activated.
                    Check the <see cref="P:IndiePortable.Communication.NetClassic.TcpConnection.IsActivated" /> property.
                </para>
            </exception>
            <remarks>
                <para>Call this method to allow incoming and outgoing messages to be sent or received.</para>
                <para>Implements <see cref="M:IndiePortable.Communication.Devices.IConnection`1.Activate" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnection.Disconnect">
            <summary>
            Disconnects the two end points.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if one of the following conditions is true:</para>
                <list type="bullet">
                    <item>
                        <description>The <see cref="P:IndiePortable.Communication.NetClassic.TcpConnection.IsActivated" /> property is <c>false</c>.</description>
                    </item>
                    <item>
                        <description>The <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" /> is disposed.</description>
                    </item>
                    <item>
                        <description>The <see cref="P:IndiePortable.Communication.NetClassic.TcpConnection.IsConnected" /> property is <c>false</c>.</description>
                    </item>
                </list>
            </exception>
            <remarks>
                <para>Implements <see cref="M:IndiePortable.Communication.Devices.IConnection`1.Disconnect" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnection.Disconnect(System.TimeSpan)">
            <summary>
            Disconnects the two end points.
            </summary>
            <param name="timeout">
                The duration that shall be waited until a disconnect response has been received.
                Must be greater than <see cref="F:System.TimeSpan.Zero" />.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>Thrown if <paramref name="timeout" /> is smaller or equals <see cref="F:System.TimeSpan.Zero" />.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if one of the following conditions is true:</para>
                <list type="bullet">
                    <item>
                        <description>The <see cref="P:IndiePortable.Communication.NetClassic.TcpConnection.IsActivated" /> property is <c>false</c>.</description>
                    </item>
                    <item>
                        <description>The <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" /> is disposed.</description>
                    </item>
                    <item>
                        <description>The <see cref="P:IndiePortable.Communication.NetClassic.TcpConnection.IsConnected" /> property is <c>false</c>.</description>
                    </item>
                </list>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
                <para>Implements <see cref="M:System.IDisposable.Dispose" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnection.SendMessage(IndiePortable.Communication.Messages.MessageBase)">
            <summary>
            Sends a <see cref="T:IndiePortable.Communication.Messages.MessageBase" /> object through the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" />.
            </summary>
            <param name="message">
                The <see cref="T:IndiePortable.Communication.Messages.MessageBase" /> that shall be sent.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="message" /> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para>
                    Thrown if the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" /> has not been activated.
                    Check the <see cref="P:IndiePortable.Communication.NetClassic.TcpConnection.IsActivated" /> property. If it is <c>false</c>,
                    call the <see cref="M:IndiePortable.Communication.NetClassic.TcpConnection.Activate" /> method before sending a message.
                </para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnection.SendMessageAsync(IndiePortable.Communication.Messages.MessageBase)">
            <summary>
            Asynchronously sends a <see cref="T:IndiePortable.Communication.Messages.MessageBase" /> object through the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" />.
            </summary>
            <param name="message">
                The <see cref="T:IndiePortable.Communication.Messages.MessageBase" /> that shall be sent.
                Must not be <c>null</c>.
            </param>
            <returns>
            The task processing the method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="message" /> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para>
                    Thrown if the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" /> has not been activated.
                    Check the <see cref="P:IndiePortable.Communication.NetClassic.TcpConnection.IsActivated" /> property. If it is <c>false</c>,
                    call the <see cref="M:IndiePortable.Communication.NetClassic.TcpConnection.Activate" /> method before sending a message.
                </para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnection.StartEncryptionSession">
            <summary>
            Starts the encryption session for the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" />.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if the session is already encrypted. Check the <see cref="P:IndiePortable.Communication.NetClassic.TcpConnection.IsSessionEncrypted" /> property.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnection.StartEncryptionSessionAsync">
            <summary>
            Asynchronously starts the encryption session for the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" />.
            </summary>
            <returns>
                The task representing the method.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if the session is already encrypted. Check the <see cref="P:IndiePortable.Communication.NetClassic.TcpConnection.IsSessionEncrypted" /> property.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnection.SendConnectionMessage(IndiePortable.Communication.Devices.ConnectionMessages.ConnectionMessageBase)">
            <summary>
            Sends a connection message.
            </summary>
            <param name="message">
                The <see cref="T:IndiePortable.Communication.Devices.ConnectionMessages.ConnectionMessageBase" /> that shall be sent.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" /> is not activated. Check the <see cref="P:IndiePortable.Communication.NetClassic.TcpConnection.IsActivated" /> property.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="message" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnection.SendConnectionMessageAsync(IndiePortable.Communication.Devices.ConnectionMessages.ConnectionMessageBase)">
            <summary>
            Sends a connection message asynchonously.
            </summary>
            <param name="message">
                The <see cref="T:IndiePortable.Communication.Devices.ConnectionMessages.ConnectionMessageBase" /> that shall be sent.
                Must not be <c>null</c>.
            </param>
            <returns>
                The running task.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" /> is not activated. Check the <see cref="P:IndiePortable.Communication.NetClassic.TcpConnection.IsActivated" /> property.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="message" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnection.RaiseMessageReceived(IndiePortable.Communication.Messages.MessageBase)">
            <summary>
            Raises the <see cref="E:IndiePortable.Communication.NetClassic.TcpConnection.MessageReceived" /> event.
            </summary>
            <param name="message">
                The <see cref="T:IndiePortable.Communication.Messages.MessageBase" /> that has been received.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="message" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnection.RaiseConnectionMessageReceived(IndiePortable.Communication.Devices.ConnectionMessages.ConnectionMessageBase)">
            <summary>
            Raises the <see cref="E:IndiePortable.Communication.NetClassic.TcpConnection.ConnectionMessageReceived" /> event.
            </summary>
            <param name="message">
                The <see cref="T:IndiePortable.Communication.Devices.ConnectionMessages.ConnectionMessageBase" /> that has been received.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="message" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnection.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnection.MessageReader(IndiePortable.AdvancedTasks.ITaskConnection)">
            <summary>
            Reads messages from the TCP stream.
            </summary>
            <param name="taskConnection">
                The <see cref="T:IndiePortable.AdvancedTasks.ITaskConnection" /> provinding communication between the caller and the callee thread.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="taskConnection" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnection.handlerDisconnect">
            <summary>
            The <see cref="T:IndiePortable.Communication.Devices.ConnectionMessageHandler`1" /> that handles incoming <see cref="T:IndiePortable.Communication.Devices.ConnectionMessages.ConnectionDisconnectRequest" /> messages.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnection.handlerKeepAlive">
            <summary>
            The <see cref="T:IndiePortable.Communication.Devices.ConnectionMessageHandler`1" /> that handles incoming <see cref="T:IndiePortable.Communication.Devices.ConnectionMessages.ConnectionMessageKeepAlive" /> messages.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnection.handlerContent">
            <summary>
            The <see cref="T:IndiePortable.Communication.Devices.ConnectionMessageHandler`1" /> that handles incoming <see cref="T:IndiePortable.Communication.Devices.ConnectionMessages.ConnectionContentMessage" /> messages.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnection.handlerEncryptRequest">
            <summary>
            The <see cref="T:IndiePortable.Communication.Devices.ConnectionMessageHandler`1" /> that handles incoming <see cref="T:IndiePortable.Communication.EncryptedConnection.ConnectionEncryptRequest" /> messages.
            </summary>
        </member>
        <member name="T:IndiePortable.Communication.NetClassic.TcpConnectionListener">
            <summary>
            Listens for incoming TCP connections.
            </summary>
            <seealso cref="T:IndiePortable.Communication.Devices.IConnectionListener`3" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnectionListener.isListeningBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Communication.NetClassic.TcpConnectionListener.IsListening" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnectionListener.isDisposed">
            <summary>
            Determines whether the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnectionListener" /> has been disposed.
            </summary>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnectionListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnectionListener" /> class.
            </summary>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnectionListener.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnectionListener" /> class.
            </summary>
        </member>
        <member name="E:IndiePortable.Communication.NetClassic.TcpConnectionListener.ConnectionReceived">
            <summary>
            Raised when a connection has been received.
            </summary>
            <remarks>
                <para>Implements <see cref="E:IndiePortable.Communication.Devices.IConnectionListener`3.ConnectionReceived" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Communication.NetClassic.TcpConnectionListener.IsListening">
            <summary>
            Gets a value indicating whether the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnectionListener" /> is actively listening for connections.
            </summary>
            <value>
                <c>true</c> if the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnectionListener" />
                is actively listening for connections; otherwise, <c>false</c>.
            </value>
            <remarks>
                <para>Implements <see cref="P:IndiePortable.Communication.Devices.IConnectionListener`3.IsListening" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnectionListener.StartListening(IndiePortable.Communication.NetClassic.TcpConnectionListenerSettings)">
            <summary>
            Starts listening for connections.
            </summary>
            <param name="settings">
                The settings specifying parameters for the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnectionListener" />.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnectionListener" /> is currently listening for connections.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="settings" /> is <c>null</c>.</para>
            </exception>
            <remarks>
                <para>Implements <see cref="M:IndiePortable.Communication.Devices.IConnectionListener`3.StartListening(`1)" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnectionListener.StopListening">
            <summary>
            Stops listening for connections.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnectionListener" /> is not listening for connections.</para>
            </exception>
            <remarks>
                <para>Implements <see cref="M:IndiePortable.Communication.Devices.IConnectionListener`3.StopListening" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnectionListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
                <para>Implements <see cref="M:System.IDisposable.Dispose" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnectionListener.RaiseConnectionReceived(IndiePortable.Communication.NetClassic.TcpConnection)">
            <summary>
            Raises the <see cref="E:IndiePortable.Communication.NetClassic.TcpConnectionListener.ConnectionReceived" /> event.
            </summary>
            <param name="connection">
                The <see cref="T:IndiePortable.Communication.NetClassic.TcpConnection" /> that has been received.
                Must not be <c>null</c>.
            </param>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnectionListener.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnectionListener.TcpConnectionListenerHelper.isActiveBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Communication.NetClassic.TcpConnectionListener.TcpConnectionListenerHelper.IsActive" /> property.
            </summary>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnectionListener.TcpConnectionListenerHelper.#ctor(System.Net.Sockets.TcpListener)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnectionListener.TcpConnectionListenerHelper"/> class.
            </summary>
            <param name="listener">
                The <see cref="T:System.Net.Sockets.TcpListener" /> that shall be listened with.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="listener" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnectionListener.TcpConnectionListenerHelper.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnectionListener.TcpConnectionListenerHelper" /> class.
            </summary>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnectionListener.TcpConnectionListenerHelper.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
                <para>Implements <see cref="M:System.IDisposable.Dispose" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnectionListener.TcpConnectionListenerHelper.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:IndiePortable.Communication.NetClassic.TcpConnectionListenerSettings">
            <summary>
            Encapsulates settings for a <see cref="T:IndiePortable.Communication.NetClassic.TcpConnectionListener" />.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.NetClassic.TcpConnectionListenerSettings.listenerNetworkAdaptersBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Communication.NetClassic.TcpConnectionListenerSettings.ListenerNetworkAdapters" /> property.
            </summary>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnectionListenerSettings.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnectionListenerSettings"/> class.
            </summary>
            <param name="listenerPort">
                The port that shall be listened to.
            </param>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnectionListenerSettings.#ctor(IndiePortable.Communication.Tcp.IPPortAddressInfo[])">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnectionListenerSettings"/> class.
            </summary>
            <param name="listenerNetworkAdapters">
                The network adaptes' address informations which shall be used to listen for incoming connections.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="listenerNetworkAdapters" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.NetClassic.TcpConnectionListenerSettings.#ctor(System.Collections.Generic.IEnumerable{IndiePortable.Communication.Tcp.IPPortAddressInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Communication.NetClassic.TcpConnectionListenerSettings"/> class.
            </summary>
            <param name="listenerNetworkAdapters">
                The network adaptes' address informations which shall be used to listen for incoming connections.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="listenerNetworkAdapters" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="P:IndiePortable.Communication.NetClassic.TcpConnectionListenerSettings.ListenerNetworkAdapters">
            <summary>
            Gets the network adaptes' address informations which shall be used to listen for incoming connections.
            </summary>
            <value>
                Contains the network adaptes' address informations which shall be used to listen for incoming connections.
            </value>
        </member>
    </members>
</doc>
