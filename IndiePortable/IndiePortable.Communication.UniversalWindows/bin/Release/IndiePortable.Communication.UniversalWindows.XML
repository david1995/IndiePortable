<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IndiePortable.Communication.UniversalWindows</name>
    </assembly>
    <members>
        <member name="T:IndiePortable.Communication.UniversalWindows.RsaCryptoManager">
            <summary>
            Encapsulates properties and methods for en- and decrypting bytes with RSA encryption.
            </summary>
            <seealso cref="T:IndiePortable.Communication.EncryptedConnection.CryptoManagerBase`1" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:IndiePortable.Communication.UniversalWindows.RsaCryptoManager.remoteRSA">
            <summary>
            The object responsible for decrypting data.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.UniversalWindows.RsaCryptoManager.localPublicKeyBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Communication.UniversalWindows.RsaCryptoManager.LocalPublicKey" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.UniversalWindows.RsaCryptoManager.isSessionStartedBacking">
            <summary>
            The backing field for the <seealso cref="P:IndiePortable.Communication.UniversalWindows.RsaCryptoManager.IsSessionStarted" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.UniversalWindows.RsaCryptoManager.remotePublicKey">
            <summary>
            The remote public key information.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.UniversalWindows.RsaCryptoManager.isDisposed">
            <summary>
            Indicates whether the <see cref="T:IndiePortable.Communication.UniversalWindows.RsaCryptoManager" /> is disposed.
            </summary>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.RsaCryptoManager.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Communication.UniversalWindows.RsaCryptoManager" /> class.
            </summary>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.RsaCryptoManager.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Communication.UniversalWindows.RsaCryptoManager" /> class.
            </summary>
            <param name="localRsaKeyPairBlob">
                The local key pair stored in a byte array formatted with the legacy Cryptographic API format.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="localRsaKeyPairBlob" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.RsaCryptoManager.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:IndiePortable.Communication.UniversalWindows.RsaCryptoManager" /> class.
            </summary>
        </member>
        <member name="P:IndiePortable.Communication.UniversalWindows.RsaCryptoManager.IsSessionStarted">
            <summary>
            Gets a value indicating whether the <see cref="T:IndiePortable.Communication.UniversalWindows.RsaCryptoManager" /> has started an encryption session.
            </summary>
            <value>
                <c>true</c> if the <see cref="T:IndiePortable.Communication.UniversalWindows.RsaCryptoManager" /> has started an encryption session; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IndiePortable.Communication.UniversalWindows.RsaCryptoManager.LocalPublicKey">
            <summary>
            Gets the public key of the local client.
            </summary>
            <value>
                Contains the public key of the local client.
            </value>
            <remarks>
                <para>Overrides <see cref="P:IndiePortable.Communication.EncryptedConnection.CryptoManagerBase`1.LocalPublicKey" />.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.RsaCryptoManager.StartSession(IndiePortable.Communication.EncryptedConnection.PublicKeyInfo)">
            <summary>
            Starts an encryption session.
            </summary>
            <param name="remotePublicKey">
                The public key of the remote client.
            </param>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.RsaCryptoManager.Encrypt(System.Byte[])">
            <summary>
            Encrypts the specified data by using the RSA algorithm.
            </summary>
            <param name="data">
                The data that shall be encrypted.
                Must not be <c>null</c>.
            </param>
            <returns>
                The encrypted data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="data" /> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if the session has not been started. Check the <see cref="P:IndiePortable.Communication.UniversalWindows.RsaCryptoManager.IsSessionStarted" /> property.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.RsaCryptoManager.Decrypt(System.Byte[])">
            <summary>
            Decrypts the specified data by using the RSA algorithm.
            </summary>
            <param name="data">
                The data that shall be encrypted.
                Must not be <c>null</c>.
            </param>
            <returns>
                The decrypted data.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="data" /> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if the session has not been started. Check the <see cref="P:IndiePortable.Communication.UniversalWindows.RsaCryptoManager.IsSessionStarted" /> property.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.RsaCryptoManager.ExportLocalKeyPair(System.IO.Stream)">
            <summary>
            Exports the local RSA key pair to a strem.
            </summary>
            <param name="target">
                The <see cref="T:System.IO.Stream" /> to which the RSA key pair shall be written.
                Must not be <c>null</c>.
                Must be a writable <see cref="T:System.IO.Stream" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="target" /> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>Thrown if <paramref name="target" /> is not writable. Check the <see cref="P:System.IO.Stream.CanWrite" /> property.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.RsaCryptoManager.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:IndiePortable.Communication.UniversalWindows.TcpConnection">
            <summary>
            Represents a connection between two TCP end points.
            </summary>
            <seealso cref="T:IndiePortable.Communication.Devices.IConnection`1" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:IndiePortable.Communication.UniversalWindows.TcpConnection.DefaultKeepAliveFrequency">
            <summary>
            Contains the default keep alive frequency of the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" /> of 5 seconds.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.UniversalWindows.TcpConnection.DefaultMaxKeepAliveTimeout">
            <summary>
            Contains the default maximum keep alive timeout of the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" /> of 10 seconds.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.UniversalWindows.TcpConnection.cacheBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Communication.UniversalWindows.TcpConnection.Cache" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.UniversalWindows.TcpConnection.remoteAddressBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Communication.UniversalWindows.TcpConnection.RemoteAddress" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.UniversalWindows.TcpConnection.formatter">
            <summary>
            The <see cref="T:IndiePortable.Formatter.BinaryFormatter" /> used to serialize and deserialize messages.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.UniversalWindows.TcpConnection.outputStream">
            <summary>
            The <see cref="T:System.IO.Stream" /> serving as output.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.UniversalWindows.TcpConnection.keepAliveFrequencyBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Communication.UniversalWindows.TcpConnection.KeepAliveFrequency" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.UniversalWindows.TcpConnection.maxKeepAliveTimeoutBacking">
            <summary>
            The backing field fort he <see cref="P:IndiePortable.Communication.UniversalWindows.TcpConnection.MaxKeepAliveTimeout" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.UniversalWindows.TcpConnection.isActivatedBacking">
            <summary>
            The backing field for the  <see cref="P:IndiePortable.Communication.UniversalWindows.TcpConnection.IsActivated" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.UniversalWindows.TcpConnection.isConnectedBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Communication.UniversalWindows.TcpConnection.IsConnected" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.UniversalWindows.TcpConnection.isDisposed">
            <summary>
            Indicates whether the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" /> is disposed.
            </summary>
        </member>
        <member name="F:IndiePortable.Communication.UniversalWindows.TcpConnection.isSessionEncryptedBacking">
            <summary>
            The backing filed for the <see cref="P:IndiePortable.Communication.UniversalWindows.TcpConnection.IsSessionEncrypted" /> property.
            </summary>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnection.#ctor(Windows.Networking.Sockets.StreamSocket,IndiePortable.Communication.Tcp.IPPortAddressInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection"/> class.
            </summary>
            <param name="socket">
                The <see cref="T:Windows.Networking.Sockets.StreamSocket" /> providing I/O operations for the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" />.
                Must not be <c>null</c>.
            </param>
            <param name="remoteAddress">
                The address of the remote host.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if:</para>
                <list type="bullet">
                    <item>
                        <description><paramref name="socket" /> is <c>null</c>.</description>
                    </item>
                    <item>
                        <description><paramref name="remoteAddress" /> is <c>null</c>.</description>
                    </item>
                </list>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnection.#ctor(Windows.Networking.Sockets.StreamSocket,IndiePortable.Communication.Tcp.IPPortAddressInfo,System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" /> class.
            </summary>
            <param name="socket">The client.</param>
            <param name="remoteAddress">The remote address.</param>
            <param name="keepAliveFrequency">The keep alive frequency.</param>
            <param name="maxKeepAliveTimeout">The maximum keep alive timeout.</param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if at least one of the following conditions applies:</para>
                <list type="bullet">
                    <item><paramref name="socket" /> is <c>null</c>.</item>
                    <item><paramref name="remoteAddress" /> is <c>null</c>.</item>
                </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>Thrown if at least one of the following conditions applies:</para>
                <list type="bullet">
                    <item><paramref name="keepAliveFrequency" /> is <c>null</c>.</item>
                    <item><paramref name="maxKeepAliveTimeout" /> is <c>null</c>.</item>
                </list>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnection.#ctor(Windows.Networking.Sockets.StreamSocket,IndiePortable.Communication.Tcp.IPPortAddressInfo,IndiePortable.Communication.EncryptedConnection.CryptoManagerBase{IndiePortable.Communication.EncryptedConnection.PublicKeyInfo})">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection"/> class.
            </summary>
            <param name="socket">
                The <see cref="T:Windows.Networking.Sockets.StreamSocket" /> providing I/O operations for the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" />.
                Must not be <c>null</c>.
            </param>
            <param name="remoteAddress">
                The address of the remote host.
                Must not be <c>null</c>.
            </param>
            <param name="cryptoManager">
                The <see cref="T:IndiePortable.Communication.EncryptedConnection.CryptoManagerBase`1" /> managing the encryption and decryption of messages.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if at least one of the following conditions applies:</para>
                <list type="bullet">
                    <item><paramref name="socket" /> is <c>null</c>.</item>
                    <item><paramref name="remoteAddress" /> is <c>null</c>.</item>
                    <item><paramref name="cryptoManager" /> is <c>null</c>.</item>
                </list>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnection.#ctor(Windows.Networking.Sockets.StreamSocket,IndiePortable.Communication.Tcp.IPPortAddressInfo,IndiePortable.Communication.EncryptedConnection.CryptoManagerBase{IndiePortable.Communication.EncryptedConnection.PublicKeyInfo},System.TimeSpan,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection"/> class.
            </summary>
            <param name="socket">
                The <see cref="T:Windows.Networking.Sockets.StreamSocket" /> providing I/O operations for the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" />.
                Must not be <c>null</c>.
            </param>
            <param name="remoteAddress">
                The address of the remote host.
                Must not be <c>null</c>.
            </param>
            <param name="cryptoManager">
                The <see cref="T:IndiePortable.Communication.EncryptedConnection.CryptoManagerBase`1" /> managing the encryption and decryption of messages.
                Must not be <c>null</c>.
            </param>
            <param name="keepAliveFrequency">
                The interval of sending keep-alive messages.
                Must be greater than <see cref="F:System.TimeSpan.Zero" />.
            </param>
            <param name="maxKeepAliveTimeout">
                The maximum acceptable interval between sending two keep-alive messages.
                Must be greater than <paramref name="keepAliveFrequency" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if at least one of the following conditions applies:</para>
                <list type="bullet">
                    <item><paramref name="socket" /> is <c>null</c>.</item>
                    <item><paramref name="remoteAddress" /> is <c>null</c>.</item>
                    <item><paramref name="cryptoManager" /> is <c>null</c>.</item>
                </list>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>Thrown if at least one of the following conditions applies:</para>
                <list type="bullet">
                    <item><paramref name="keepAliveFrequency" /> is <c>null</c>.</item>
                    <item><paramref name="maxKeepAliveTimeout" /> is <c>null</c>.</item>
                </list>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnection.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" /> class.
            </summary>
        </member>
        <member name="E:IndiePortable.Communication.UniversalWindows.TcpConnection.ConnectionMessageReceived">
            <summary>
            Raised when a <see cref="T:IndiePortable.Communication.Devices.ConnectionMessages.ConnectionMessageBase" /> has been received.
            </summary>
            <remarks>
                <para>Implements <see cref="E:IndiePortable.Communication.Devices.IConnection`1.ConnectionMessageReceived" /> implicitly.</para>
            </remarks>
        </member>
        <member name="E:IndiePortable.Communication.UniversalWindows.TcpConnection.MessageReceived">
            <summary>
            Raised when a <see cref="T:IndiePortable.Communication.Messages.MessageBase" /> object has been received.
            </summary>
            <remarks>
                <para>Implements <see cref="E:IndiePortable.Communication.Devices.IMessageReceiver.MessageReceived" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Communication.UniversalWindows.TcpConnection.Cache">
            <summary>
            Gets the <see cref="T:IndiePortable.Communication.Devices.MessageDispatcher" /> acting as a message cache for the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" />.
            </summary>
            <value>
                Contains the <see cref="T:IndiePortable.Communication.Devices.MessageDispatcher" /> acting as a message cache for the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" />.
            </value>
            <remarks>
                <para>Implements <see cref="P:IndiePortable.Communication.Devices.IMessageReceiver.Cache" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Communication.UniversalWindows.TcpConnection.IsActivated">
            <summary>
            Gets a value indicating whether the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" /> is activated.
            </summary>
            <value>
                <c>true</c> if the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" /> is activated; otherwise, <c>false</c>.
            </value>
            <remarks>
                <para>
                    Messages can only be sent or received if <see cref="P:IndiePortable.Communication.UniversalWindows.TcpConnection.IsActivated" /> is <c>true</c>.
                    Otherwise, an <see cref="T:System.InvalidOperationException" /> will be thrown.
                </para>
                <para>Implements <see cref="P:IndiePortable.Communication.Devices.IConnection`1.IsActivated" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Communication.UniversalWindows.TcpConnection.IsConnected">
            <summary>
            Gets a value indicating whether the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" /> is connected to the other end.
            </summary>
            <value>
                <c>true</c> if the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" /> is connected; otherwise, <c>false</c>.
            </value>
            <remarks>
                <para>Implements <see cref="P:IndiePortable.Communication.Devices.IConnection`1.IsConnected" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Communication.UniversalWindows.TcpConnection.IsSessionEncrypted">
            <summary>
            Gets a value indicating whether the current connection session is session encrypted.
            </summary>
            <value>
                <c>true</c> if the current connection session is encrypted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IndiePortable.Communication.UniversalWindows.TcpConnection.KeepAliveFrequency">
            <summary>
            Gets the interval of sending keep-alive messages.
            </summary>
            <value>
                Contains the interval of sending keep-alive messages.
            </value>
        </member>
        <member name="P:IndiePortable.Communication.UniversalWindows.TcpConnection.MaxKeepAliveTimeout">
            <summary>
            Gets the maximum acceptable interval between sending two keep-alive messages.
            </summary>
            <value>
                Contains the maximum acceptable interval between sending two keep-alive messages.
            </value>
        </member>
        <member name="P:IndiePortable.Communication.UniversalWindows.TcpConnection.RemoteAddress">
            <summary>
            Gets the remote address of the other connection end.
            </summary>
            <value>
                Contains the remote address of the other connection end.
            </value>
            <remarks>
                <para>Implements <see cref="P:IndiePortable.Communication.Devices.IConnection`1.RemoteAddress" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnection.Activate">
            <summary>
            Activates the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" />.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" /> has already been activated.</para>
            </exception>
            <remarks>
                <para>Implements <see cref="M:IndiePortable.Communication.Devices.IConnection`1.Activate" /> implicitly.</para>
                <para>Call this method to allow incoming and outgoing messages to be sent or received.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnection.Disconnect">
            <summary>
            Disconnects the two end points.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if one of the following conditions is true:</para>
                <list type="bullet">
                    <item>
                        <description>The <see cref="P:IndiePortable.Communication.UniversalWindows.TcpConnection.IsActivated" /> property is <c>false</c>.</description>
                    </item>
                    <item>
                        <description>The <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" /> is disposed.</description>
                    </item>
                    <item>
                        <description>The <see cref="P:IndiePortable.Communication.UniversalWindows.TcpConnection.IsConnected" /> property is <c>false</c>.</description>
                    </item>
                </list>
            </exception>
            <remarks>
                <para>Implements <see cref="M:IndiePortable.Communication.Devices.IConnection`1.Disconnect" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnection.Disconnect(System.TimeSpan)">
            <summary>
            Disconnects the two end points.
            </summary>
            <param name="timeout">
                The duration that shall be waited until a disconnect response has been received.
                Must be greater than <see cref="F:System.TimeSpan.Zero" />.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>Thrown if <paramref name="timeout" /> is smaller or equals <see cref="F:System.TimeSpan.Zero" />.</para>
            </exception>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if one of the following conditions is true:</para>
                <list type="bullet">
                    <item>
                        <description>The <see cref="P:IndiePortable.Communication.UniversalWindows.TcpConnection.IsActivated" /> property is <c>false</c>.</description>
                    </item>
                    <item>
                        <description>The <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" /> is disposed.</description>
                    </item>
                    <item>
                        <description>The <see cref="P:IndiePortable.Communication.UniversalWindows.TcpConnection.IsConnected" /> property is <c>false</c>.</description>
                    </item>
                </list>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnection.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
                <para>Implements <see cref="M:System.IDisposable.Dispose" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnection.StartEncryptionSession">
            <summary>
            Starts the encryption session for the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" />.
            </summary>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if the encryption session has already been started. Check the <see cref="P:IndiePortable.Communication.UniversalWindows.TcpConnection.IsSessionEncrypted" /> property.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnection.StartEncryptionSessionAsync">
            <summary>
            Asynchronously starts the encryption session for the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" />.
            </summary>
            <returns>
                The task executing the method.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if the encryption session has already been started. Check the <see cref="P:IndiePortable.Communication.UniversalWindows.TcpConnection.IsSessionEncrypted" /> property.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnection.SendMessage(IndiePortable.Communication.Messages.MessageBase)">
            <summary>
            Sends a <see cref="T:IndiePortable.Communication.Messages.MessageBase" /> object to the other connection end.
            </summary>
            <param name="message">
                The <see cref="T:IndiePortable.Communication.Messages.MessageBase" /> that shall be sent.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="message" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnection.SendMessageAsync(IndiePortable.Communication.Messages.MessageBase)">
            <summary>
            Sends a <see cref="T:IndiePortable.Communication.Messages.MessageBase" /> object asynchronously to the other connection end.
            </summary>
            <param name="message">
                The <see cref="T:IndiePortable.Communication.Messages.MessageBase" /> that shall be sent.
                Must not be <c>null</c>.
            </param>
            <returns>
                The task processing the method.
            </returns>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="message" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnection.SendConnectionMessage(IndiePortable.Communication.Devices.ConnectionMessages.ConnectionMessageBase)">
            <summary>
            Sends a connection message.
            </summary>
            <param name="message">
                The <see cref="T:IndiePortable.Communication.Devices.ConnectionMessages.ConnectionMessageBase" /> that shall be sent.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" /> is not activated. Check the <see cref="P:IndiePortable.Communication.UniversalWindows.TcpConnection.IsActivated" /> property.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="message" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnection.SendConnectionMessageAsync(IndiePortable.Communication.Devices.ConnectionMessages.ConnectionMessageBase)">
            <summary>
            Sends a connection message asynchonously.
            </summary>
            <param name="message">
                The <see cref="T:IndiePortable.Communication.Devices.ConnectionMessages.ConnectionMessageBase" /> that shall be sent.
                Must not be <c>null</c>.
            </param>
            <returns>
                The running task.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" /> is not activated. Check the <see cref="P:IndiePortable.Communication.UniversalWindows.TcpConnection.IsActivated" /> property.</para>
            </exception>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="message" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnection.RaiseMessageReceived(IndiePortable.Communication.Messages.MessageBase)">
            <summary>
            Raises the <see cref="E:IndiePortable.Communication.UniversalWindows.TcpConnection.MessageReceived" /> event.
            </summary>
            <param name="message">
                The <see cref="T:IndiePortable.Communication.Messages.MessageBase" /> that has been received.
            </param>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnection.RaiseConnectionMessageReceived(IndiePortable.Communication.Devices.ConnectionMessages.ConnectionMessageBase)">
            <summary>
            Raises the <see cref="E:IndiePortable.Communication.UniversalWindows.TcpConnection.ConnectionMessageReceived" /> event.
            </summary>
            <param name="message">
                The <see cref="T:IndiePortable.Communication.Devices.ConnectionMessages.ConnectionMessageBase" /> that has been received.
            </param>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnection.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="F:IndiePortable.Communication.UniversalWindows.TcpConnectionListener.isListeningBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Communication.UniversalWindows.TcpConnectionListener.IsListening" /> property.
            </summary>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnectionListener.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnectionListener" /> class.
            </summary>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnectionListener.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnectionListener" /> class.
            </summary>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnectionListener.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <remarks>
                <para>Implements <see cref="M:System.IDisposable.Dispose" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnectionListener.RaiseConnectionReceived(IndiePortable.Communication.UniversalWindows.TcpConnection)">
            <summary>
            Raises the <see cref="E:IndiePortable.Communication.UniversalWindows.TcpConnectionListener.ConnectionReceived" /> event.
            </summary>
            <param name="connection">
                The <see cref="T:IndiePortable.Communication.UniversalWindows.TcpConnection" /> that has been received.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="connection" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Communication.UniversalWindows.TcpConnectionListener.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="F:IndiePortable.Communication.UniversalWindows.TcpConnectionListenerSettings.listenerNetworkAdaptersBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Communication.UniversalWindows.TcpConnectionListenerSettings.ListenerNetworkAdapters" /> property.
            </summary>
        </member>
    </members>
</doc>
