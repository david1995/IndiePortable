<?xml version="1.0"?>
<doc>
    <assembly>
        <name>IndiePortable.Collections</name>
    </assembly>
    <members>
        <member name="T:IndiePortable.Collections.ArrayDictionary`2">
            <summary>
            Provides an array-based dictionary.
            </summary>
            <typeparam name="TKey">
                The type of the key.
            </typeparam>
            <typeparam name="TValue">
                The type of the value.
            </typeparam>
            <remarks>
                Implements <see cref="T:System.Collections.Generic.IDictionary`2" />, <see cref="T:IndiePortable.Formatter.ISerializable" />, <see cref="T:System.IDisposable" /> explicitly.
            </remarks>
        </member>
        <member name="F:IndiePortable.Collections.ArrayDictionary`2.semaphore">
            <summary>
            The <see cref="T:System.Threading.SemaphoreSlim" /> that handles thread synchronization for the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
        </member>
        <member name="F:IndiePortable.Collections.ArrayDictionary`2.hashedEntries">
            <summary>
            The entries of the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" /> combined with a hashed key.
            </summary>
        </member>
        <member name="F:IndiePortable.Collections.ArrayDictionary`2.keys">
            <summary>
            The keys stored in the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
        </member>
        <member name="F:IndiePortable.Collections.ArrayDictionary`2.values">
            <summary>
            The values stored in the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
        </member>
        <member name="F:IndiePortable.Collections.ArrayDictionary`2.keysBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Collections.ArrayDictionary`2.Keys" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Collections.ArrayDictionary`2.valuesBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Collections.ArrayDictionary`2.Values" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Collections.ArrayDictionary`2.countBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Collections.ArrayDictionary`2.Count" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Collections.ArrayDictionary`2.isDisposed">
            <summary>
            Determines whether the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" /> is disposed.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" /> class.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" /> class.
            </summary>
            <param name="capacity">
                The capacity of the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />. Must be greater than 0.
            </param>
            <exception cref="T:System.ArgumentException">
                Thrown if <paramref name="capacity" /> is not greater than 0.
            </exception>
        </member>
        <member name="P:IndiePortable.Collections.ArrayDictionary`2.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
            <value>
                Contains the number of elements contained in the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </value>
            <remarks>
                Implements <see cref="P:System.Collections.Generic.ICollection`1.Count" /> implicitly.
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.ArrayDictionary`2.Capacity">
            <summary>
            Gets the capacity of the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            This does not affect the amount of items that can be stored in the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
            <value>
                Contains the capacity of the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </value>
        </member>
        <member name="P:IndiePortable.Collections.ArrayDictionary`2.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" /> is read-only.
            </summary>
            <value>
                Contains a value indicating whether the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" /> is read-only.
            </value>
            <remarks>
                Implements <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" /> implicitly.
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.ArrayDictionary`2.Keys">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
            <value>
                Contains the <see cref="T:System.Collections.Generic.ICollection`1" /> containing the keys of the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </value>
            <remarks>
                Implements <see cref="P:System.Collections.Generic.IDictionary`2.Keys" /> implicitly.
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.ArrayDictionary`2.Values">
            <summary>
            Gets the <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
            <value>
                Contains the <see cref="T:System.Collections.Generic.ICollection`1" /> containing the values in the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </value>
            <remarks>
                Implements <see cref="P:System.Collections.Generic.IDictionary`2.Values" /> implicitly.
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.ArrayDictionary`2.Item(`0)">
            <summary>
            Gets or sets the <typeparamref name="TValue"/> with the specified key.
            </summary>
            <value>
                Contains the <typeparamref name="TValue" /> with the specified key.
            </value>
            <param name="key">
                The key for the desired <typeparamref name="TValue" />.
            </param>
            <returns>
                Returns the <typeparamref name="TValue" /> associated with <paramref name="key" />.
            </returns>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
            <param name="item">
                The object to add to the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </param>
            <exception cref="T:System.ArgumentException">
                Thrown if the key already exists in the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </exception>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.Add(`0,`1)">
            <summary>
            Adds an item to the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
            <param name="key">
                The key of the item.
            </param>
            <param name="value">
                The value of the item.
            </param>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.Clear">
            <summary>
            Removes all items from the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.ICollection`1.Clear" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" /> contains the specified item.
            </summary>
            <param name="item">
                The item that shall be searched for.
            </param>
            <returns>
                Returns a value indicating whether the specified <paramref name="item" />
                could be found in the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </returns>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" /> contains the specified key.
            </summary>
            <param name="key">
                The key that shall be searched for.
            </param>
            <returns>
                Returns a value indicating whether the specified <paramref name="key" />
                could be found in the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </returns>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" /> to an array starting at a specified array index.
            </summary>
            <param name="array">
                The target array that shall be populated.
            </param>
            <param name="arrayIndex">
                The start index in the array.
            </param>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.GetObjectData(IndiePortable.Formatter.ObjectDataCollection)">
            <summary>
            Populates a specified <see cref="T:IndiePortable.Formatter.ObjectDataCollection" /> instance with data from the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" /> instance.
            </summary>
            <param name="data">
                The <see cref="T:IndiePortable.Formatter.ObjectDataCollection" /> that shall be populated.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="data" /> is <c>null</c>.</para>
            </exception>
            <remarks>
                Implements <see cref="M:IndiePortable.Formatter.ISerializable.GetObjectData(IndiePortable.Formatter.ObjectDataCollection)" />.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the specified item.
            </summary>
            <param name="item">
                The item that shall be removed.
            </param>
            <returns>
                Returns a value indicating whether the item could be found.
            </returns>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.Remove(`0)">
            <summary>
            Removes the item with the specified key.
            </summary>
            <param name="key">
                The key specifying the item to remove.
            </param>
            <returns>
                Returns a value indicating whether the item could be found.
            </returns>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.IDictionary`2.Remove(`0)" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Tries to get the value associated with the specified key.
            </summary>
            <param name="key">
                The key that is associated with the desired value.
            </param>
            <param name="value">
                The value associated with <paramref name="key" />.
            </param>
            <returns>
                Returns a value indicating whether <paramref name="key" /> could be found.
            </returns>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.TrySetValue(`0,`1)">
            <summary>
            Tries to set the value associated with a specified key.
            </summary>
            <param name="key">
                The key whose value shall be replaced.
            </param>
            <param name="newValue">
                The new value associated with <paramref name="key" />.
            </param>
            <returns>
                Returns a value indicating whether the operation has been successful.
            </returns>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.GetEnumerator">
            <summary>
            Gets an enumerator for the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
            <returns>
                Returns an enumerator for the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </returns>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
            <returns>
                Returns an enumerator for the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </returns>
            <remarks>
                Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> explicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.Dispose">
            <summary>
            Releases all resources reserved by the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
            <remarks>
                Implements <see cref="M:System.IDisposable.Dispose" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.AddItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
            <param name="item">
                The item that shall be added.
            </param>
            <remarks>
                <para>This method is supposed to be overwritten by derived types if they implement their own item adding logic.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.ClearItems">
            <summary>
            Removes all items from the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.ContainsKeyItem(`0)">
            <summary>
            Determines whether the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" /> contains a specified key.
            </summary>
            <param name="key">
                The key that shall be searched for.
            </param>
            <returns>
                Returns a value indicating whether the specified <paramref name="key" /> could be found in the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </returns>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.CopyToArray(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" /> to an array starting at a specified array index.
            </summary>
            <param name="array">
                The target array that shall be populated.
            </param>
            <param name="arrayIndex">
                The start index in the array.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="array" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.ContainsItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" /> contains a specified item.
            </summary>
            <param name="item">
                The item that shall be searched for.
            </param>
            <returns>
                Returns a value indicating whether the specified <paramref name="item" /> could be found in the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </returns>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.GetItem(`0)">
            <summary>
            Gets the value associated with a specified key.
            </summary>
            <param name="key">
                The key that is associated with the desired value.
            </param>
            <returns>
                Returns the value associated with <paramref name="key" />.
            </returns>
            <exception cref="T:System.ArgumentException">
                Thrown if the specified <paramref name="key" /> could not be found in the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.ReplaceItem(`0,`1)">
            <summary>
            Replaces the value associated with the specified key by a new value.
            </summary>
            <param name="key">
                The key that is associated with the old value.
            </param>
            <param name="newValue">
                The new value for <paramref name="key" />.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.RemoveItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the specified item from the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
            <param name="item">
                The item that shall be removed.
            </param>
            <returns>
                Returns a value indicating whether the specified item could be found.
            </returns>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.RemoveItem(`0)">
            <summary>
            Removes the item with the specified key from the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
            <param name="key">
                The key of the item that shall be removed.
            </param>
            <returns>
                Returns a value indicating whether an item with the specified <paramref name="key" /> could be found.
            </returns>
        </member>
        <member name="T:IndiePortable.Collections.ArrayDictionary`2.Enumerator">
            <summary>
            Provides an enumerator for an <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
            <remarks>
                Implements <see cref="T:System.Collections.Generic.IEnumerator`1" />, <see cref="T:System.Collections.IEnumerator" />, <see cref="T:System.IDisposable" /> explicitly.
            </remarks>
        </member>
        <member name="F:IndiePortable.Collections.ArrayDictionary`2.Enumerator.enumerable">
            <summary>
            The <see cref="T:IndiePortable.Collections.ArrayDictionary`2" /> that shall be enumerated.
            </summary>
        </member>
        <member name="F:IndiePortable.Collections.ArrayDictionary`2.Enumerator.currentIndex">
            <summary>
            The current position of the <see cref="T:IndiePortable.Collections.ArrayDictionary`2.Enumerator" />.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.Enumerator.#ctor(IndiePortable.Collections.ArrayDictionary{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.ArrayDictionary`2.Enumerator" /> struct.
            </summary>
            <param name="enumerable">
                The <see cref="T:IndiePortable.Collections.ArrayDictionary`2" /> that shall be enumerated.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="enumerable" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="P:IndiePortable.Collections.ArrayDictionary`2.Enumerator.Current">
            <summary>
            Gets the current element of the <see cref="T:IndiePortable.Collections.ArrayDictionary`2.Enumerator" />.
            </summary>
            <value>
                Contains the current element of the <see cref="T:IndiePortable.Collections.ArrayDictionary`2.Enumerator" />.
            </value>
            <remarks>
                Implements <see cref="P:System.Collections.Generic.IEnumerator`1.Current" /> implicitly.
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.ArrayDictionary`2.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element of the <see cref="T:System.Collections.IEnumerator" />.
            </summary>
            <value>
                Contains the current element of the <see cref="T:System.Collections.IEnumerator" />.
            </value>
            <remarks>
                Implements <see cref="P:System.Collections.IEnumerator.Current" /> explicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.Enumerator.Dispose">
            <summary>
            Releases any resources reserved by the <see cref="T:IndiePortable.Collections.ArrayDictionary`2.Enumerator" />.
            </summary>
            <remarks>
                Implements <see cref="M:System.IDisposable.Dispose" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.Enumerator.MoveNext">
            <summary>
            Advances the position of the <see cref="T:IndiePortable.Collections.ArrayDictionary`2.Enumerator" /> to the next element.
            </summary>
            <returns>
                Returns a value indicating whether the <see cref="T:IndiePortable.Collections.ArrayDictionary`2.Enumerator" /> is in the list.
            </returns>
            <remarks>
                Implements <see cref="M:System.Collections.IEnumerator.MoveNext" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ArrayDictionary`2.Enumerator.Reset">
            <summary>
            Resets the <see cref="T:IndiePortable.Collections.ArrayDictionary`2.Enumerator" /> before the first element.
            </summary>
            <remarks>
                Implements <see cref="M:System.Collections.IEnumerator.Reset" /> implicitly.
            </remarks>
        </member>
        <member name="T:IndiePortable.Collections.DynamicArray`1">
            <summary>
            Provides a dynamically sized, thread safe array.
            </summary>
            <typeparam name="T">
                The type of the items.
            </typeparam>
            <remarks>
                Implements <see cref="T:System.Collections.Generic.IEnumerable`1" />, <see cref="T:System.Collections.Generic.IList`1" />, <see cref="T:IndiePortable.Formatter.ISerializable" />, <see cref="T:System.IDisposable" /> explicitly.
            </remarks>
        </member>
        <member name="F:IndiePortable.Collections.DynamicArray`1.backing">
            <summary>
            The backing array for the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
        </member>
        <member name="F:IndiePortable.Collections.DynamicArray`1.growthRateBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Collections.DynamicArray`1.GrowthRate" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Collections.DynamicArray`1.countBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Collections.DynamicArray`1.Count" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Collections.DynamicArray`1.capacityBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Collections.DynamicArray`1.Capacity" /> property.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.DynamicArray`1" /> class
            with the default capacity of 8 items and the default growth rate of 2.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.DynamicArray`1" /> class
            with a specified capacity of items and the default growth rate of 2.
            </summary>
            <param name="capacity">
                The initial capacity of the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="capacity" /> is smaller than 0.
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.DynamicArray`1" /> class
            with the default capacity of 8 items and a specified growth rate.
            </summary>
            <param name="growthRate">
                The growth rate of the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="growthRate" /> is smaller or equals 1.
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.DynamicArray`1" /> class
            with a specified capacity of items and a specified growth rate.
            </summary>
            <param name="capacity">
                The initial capacity of the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </param>
            <param name="growthRate">
                The growth rate of the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when<para />
                    - <paramref name="growthRate" /> is smaller or equals 1.<para />
                    - <paramref name="capacity" /> is smaller than 0.
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.DynamicArray`1" /> class
            with an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and a default growth rate of 2.
            </summary>
            <param name="items">
                The items that shall be copied to the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="items" /> is null.
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.#ctor(System.Double,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.DynamicArray`1" /> class
            with an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and a specified growth rate.
            </summary>
            <param name="growthRate">
                The growth rate of the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </param>
            <param name="items">
                The items that shall be copied to the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="items" /> is null.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="growthRate" /> is smaller or equals 1.
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.#ctor(IndiePortable.Formatter.ObjectDataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.DynamicArray`1" /> class.
            </summary>
            <param name="data">
                The serialized data of the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="data" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:IndiePortable.Collections.DynamicArray`1" /> class.
            </summary>
        </member>
        <member name="E:IndiePortable.Collections.DynamicArray`1.CapacityChanged">
            <summary>
            Raised when the <see cref="P:IndiePortable.Collections.DynamicArray`1.Capacity" /> property has been changed.
            </summary>
        </member>
        <member name="E:IndiePortable.Collections.DynamicArray`1.CountChanged">
            <summary>
            Raised when the <see cref="P:IndiePortable.Collections.DynamicArray`1.Count" /> property has been changed.
            </summary>
        </member>
        <member name="E:IndiePortable.Collections.DynamicArray`1.GrowthRateChanged">
            <summary>
            Raised when the <see cref="P:IndiePortable.Collections.DynamicArray`1.GrowthRate" /> property has been changed.
            </summary>
        </member>
        <member name="P:IndiePortable.Collections.DynamicArray`1.Capacity">
            <summary>
            Gets the capacity of the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <value>
                Contains the capacity of the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </value>
        </member>
        <member name="P:IndiePortable.Collections.DynamicArray`1.GrowthRate">
            <summary>
            Gets the growth rate of the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <value>
                Contains the growth rate of the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="value" /> smaller or equals 1.
            </exception>
        </member>
        <member name="P:IndiePortable.Collections.DynamicArray`1.Count">
            <summary>
            Gets the amount of items in the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <value>
                Contains the amount of items in the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </value>
            <remarks>
                Implements <see cref="P:System.Collections.Generic.ICollection`1.Count" /> implicitly.
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.DynamicArray`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:IndiePortable.Collections.DynamicArray`1" /> is read-only.
            </summary>
            <value>
                Contains a value indicating whether the <see cref="T:IndiePortable.Collections.DynamicArray`1" /> is read-only.
            </value>
            <remarks>
                Implements <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" /> implicitly.
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.DynamicArray`1.UsagePercent">
            <summary>
            Gets the usage percent of the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            The range is between 0.0 and 1.0.
            </summary>
            <value>
                Contains the usage percent of the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </value>
        </member>
        <member name="P:IndiePortable.Collections.DynamicArray`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <param name="index">
                The index of the item that shall be returned or set.
            </param>
            <returns>
                Returns the item at the specified index.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="index" /> is smaller than 0 or greater or equals <see cref="P:IndiePortable.Collections.DynamicArray`1.Count" />.
            </exception>
            <remarks>
                Implements <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.Add(`0)">
            <summary>
            Adds an item to the end of the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <param name="item">
                The item that shall be added.
            </param>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds items stored in an <see cref="T:System.Collections.Generic.IEnumerable`1" /> to the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <param name="items">
                The items that shall be added.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="items" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.AddRange(`0[])">
            <summary>
            Adds items stored in an array of <typeparamref name="T" /> to the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <param name="items">
                The items that shall be added.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves an item in the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <param name="sourceIndex">
                The index of the item to move.
            </param>
            <param name="destinationIndex">
                The destination position where the item should be moved.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>Thrown if:</para>
                <para>  - <paramref name="sourceIndex" /> is less than <c>0</c> or greater or equals <see cref="P:IndiePortable.Collections.DynamicArray`1.Count" />.</para>
                <para>  - <paramref name="destinationIndex" /> is less than <c>0</c> or greater or equals <see cref="P:IndiePortable.Collections.DynamicArray`1.Count" />.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific item in the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <param name="item">
                The item that shall be removed.
            </param>
            <returns>
                Returns a value indicating whether the item has been found in the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </returns>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.IndexOf(`0)">
            <summary>
            Gets the index of the first occurrence of an item in the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <param name="item">
                The item that shall be searched for.
            </param>
            <returns>
                Returns the index of the first occurrence, or -1 if <paramref name="item" /> could not be found.
            </returns>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.IList`1.IndexOf(`0)" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item at a specified index in the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <param name="index">
                The index where <paramref name="item" /> shall be inserted.
            </param>
            <param name="item">
                The item that shall be inserted.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="index" /> is smaller than 0 or greater than <see cref="P:IndiePortable.Collections.DynamicArray`1.Count" />.
            </exception>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.IList`1.Insert(System.Int32,`0)" />.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">
                The index of the item that shall be removed.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="index" /> is smaller than 0 or greater or equals <see cref="P:IndiePortable.Collections.DynamicArray`1.Count" />.
            </exception>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.Clear">
            <summary>
            Removes all items from the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.ICollection`1.Clear" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:IndiePortable.Collections.DynamicArray`1" /> contains a specified item.
            </summary>
            <param name="item">
                The item to locate in the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </param>
            <returns>
                Returns a value indicating whether the element could be found.
            </returns>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the items of the <see cref="T:IndiePortable.Collections.DynamicArray`1" /> to an <see cref="T:System.Array" />.
            </summary>
            <param name="array">
                The <see cref="T:System.Array" /> where the items shall be copied.
            </param>
            <param name="arrayIndex">
                The index inside of <paramref name="array" /> where the copying shall start.
            </param>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.GetObjectData(IndiePortable.Formatter.ObjectDataCollection)">
            <summary>
            Gets the object data of the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <param name="data">
                The data that shall be serialized.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown when <paramref name="data" /> is <c>null</c>.</para>
            </exception>
            <remarks>
                Implements <see cref="M:IndiePortable.Formatter.ISerializable.GetObjectData(IndiePortable.Formatter.ObjectDataCollection)" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.GetEnumerator">
            <summary>
            Gets a new <see cref="T:System.Collections.Generic.IEnumerator`1" /> for the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <returns>
                Returns the generated <see cref="T:System.Collections.Generic.IEnumerator`1" />.
            </returns>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" />.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the <see cref="T:System.Collections.IEnumerable" />.
            </summary>
            <returns>
                Returns an enumerator that iterates through the <see cref="T:System.Collections.IEnumerable" />.
            </returns>
            <remarks>
                Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> explicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.Dispose">
            <summary>
            Releases all resources reserved by the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <remarks>
                Implements <see cref="M:System.IDisposable.Dispose" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.AddItem(`0)">
            <summary>
            Adds an element at the end of the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <param name="item">
                The item that shall be added.
            </param>
            <remarks>
                This method is virtual.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.MoveItem(System.Int32,System.Int32)">
            <summary>
            Moves an item in the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <param name="sourceIndex">
                The index of the item to move.
            </param>
            <param name="destinationIndex">
                The destination position where the item should be moved.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.GetItem(System.Int32)">
            <summary>
            Gets the item at a specified index.
            </summary>
            <param name="index">
                The index of the item.
            </param>
            <returns>
                Returns the item at the specified index.
            </returns>
            <remarks>
                This method is virtual.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="index" /> is smaller than 0 or greater or equals <see cref="P:IndiePortable.Collections.DynamicArray`1.Count" />.
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item at a specified position.
            </summary>
            <param name="index">
                The index where the item shall be inserted.
            </param>
            <param name="item">
                The item that shall be inserted.
            </param>
            <remarks>
                This method is virtual.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="index" /> is smaller than 0 or greater than <see cref="P:IndiePortable.Collections.DynamicArray`1.Count" />.
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.ReplaceItem(System.Int32,`0)">
            <summary>
            Replaces an item at a specified index.
            </summary>
            <param name="index">
                The index of the item that shall be replaced.
            </param>
            <param name="item">
                The item that shall replace the existing one.
            </param>
            <remarks>
                This method is virtual.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="index" /> is smaller than 0 or greater or equals <see cref="P:IndiePortable.Collections.DynamicArray`1.Count" />.
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index and moves all items after it forwards.
            </summary>
            <param name="index">
                The index of the item that shall be removed.
            </param>
            <remarks>
                This method is virtual.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="index" /> is smaller than 0 or greater or equals <see cref="P:IndiePortable.Collections.DynamicArray`1.Count" />.
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.ResetItems">
            <summary>
            Resets the items in the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <remarks>
                This method is virtual.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.RaiseCapacityChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:IndiePortable.Collections.DynamicArray`1.CapacityChanged" /> event.
            </summary>
            <param name="e">
                Contains additional information for the event handlers.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.RaiseCountChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:IndiePortable.Collections.DynamicArray`1.CountChanged" /> event.
            </summary>
            <param name="e">
                Contains additional information for the event handlers.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.RaiseGrowthRateChanged(System.EventArgs)">
            <summary>
            Raises the <see cref="E:IndiePortable.Collections.DynamicArray`1.GrowthRateChanged" /> event.
            </summary>
            <param name="e">
                Contains additional information for the event handlers.
            </param>
        </member>
        <member name="T:IndiePortable.Collections.DynamicArray`1.Enumerator">
            <summary>
            Provides an enumerator for a <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <remarks>
                Implements <see cref="T:System.Collections.Generic.IEnumerator`1" />, <see cref="T:System.Collections.IEnumerator" />, <see cref="T:System.IDisposable" />.
            </remarks>
        </member>
        <member name="F:IndiePortable.Collections.DynamicArray`1.Enumerator.array">
            <summary>
            The <see cref="T:IndiePortable.Collections.DynamicArray`1" /> that shall be enumerated.
            </summary>
        </member>
        <member name="F:IndiePortable.Collections.DynamicArray`1.Enumerator.currentPosition">
            <summary>
            The current position in <see cref="F:IndiePortable.Collections.DynamicArray`1.Enumerator.array" />.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.Enumerator.#ctor(IndiePortable.Collections.DynamicArray{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.DynamicArray`1.Enumerator" /> struct.
            </summary>
            <param name="array">
                The <see cref="T:IndiePortable.Collections.DynamicArray`1" /> that shall be enumerated.
            </param>
        </member>
        <member name="P:IndiePortable.Collections.DynamicArray`1.Enumerator.Current">
            <summary>
            Gets the current element of the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <value>
                Contains the current element of the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </value>
            <exception cref="T:System.InvalidOperationException">
                Thrown when the <see cref="T:IndiePortable.Collections.DynamicArray`1.Enumerator" /> has not been moved.
            </exception>
            <remarks>
                Implements <see cref="P:System.Collections.Generic.IEnumerator`1.Current" /> implicitly.
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.DynamicArray`1.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current element of the <see cref="T:System.Collections.IEnumerator" />.
            </summary>
            <value>
                Contains the current element of the <see cref="T:System.Collections.IEnumerator" />.
            </value>
            <remarks>
                Implements <see cref="P:System.Collections.IEnumerator.Current" /> explicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.Enumerator.Dispose">
            <summary>
            Releases all resources allocated by the <see cref="T:IndiePortable.Collections.DynamicArray`1.Enumerator" />.
            </summary>
            <remarks>
                Implements <see cref="M:System.IDisposable.Dispose" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.Enumerator.MoveNext">
            <summary>
            Advances the <see cref="T:IndiePortable.Collections.DynamicArray`1.Enumerator" /> to the next element of the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <returns>
                Returns a value indicating whether the <see cref="T:IndiePortable.Collections.DynamicArray`1.Enumerator" /> could successfully be moved.
            </returns>
            <remarks>
                Implements <see cref="M:System.Collections.IEnumerator.MoveNext" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.Enumerator.Reset">
            <summary>
            Sets the <see cref="T:IndiePortable.Collections.DynamicArray`1.Enumerator" /> to its initial position,
            which is before the first element in the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <remarks>
                Implements <see cref="M:System.Collections.IEnumerator.Reset" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DynamicArray`1.Enumerator.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="managed">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="T:IndiePortable.Collections.HashGenerator">
            <summary>
            Provides a multiplication hash function for integer numbers.
            </summary>
        </member>
        <member name="F:IndiePortable.Collections.HashGenerator.A">
            <summary>
            The multiplied value used for spreading the values.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.HashGenerator.GetHash(System.Int32,System.Int32)">
            <summary>
            Generates the hash code for a specified value.
            </summary>
            <param name="value">
                The value that shall be hashed.
            </param>
            <param name="max">
                The exclusive upper limit of the hash code.
            </param>
            <returns>
                Returns the generated hash code.
            </returns>
        </member>
        <member name="T:IndiePortable.Collections.IObservableList`1">
            <summary>
            Provides an interface for generic typed lists that are observable.
            </summary>
            <typeparam name="T">
                The type of the contained items.
            </typeparam>
            <seealso cref="T:System.Collections.Specialized.INotifyCollectionChanged" />
            <seealso cref="T:System.Collections.Generic.IList`1" />
            <seealso cref="T:System.Collections.IList" />
        </member>
        <member name="T:IndiePortable.Collections.IObservableReadOnlyList`1">
            <summary>
            Provides an interface for generic typed read-only lists that are observable.
            </summary>
            <typeparam name="T">
                The type of the items stored in the <see cref="T:IndiePortable.Collections.IObservableReadOnlyList`1" />.
            </typeparam>
            <seealso cref="T:System.Collections.Specialized.INotifyCollectionChanged" />
            <seealso cref="T:System.Collections.Generic.IReadOnlyList`1" />
            <seealso cref="T:System.Collections.IList"/>
        </member>
        <member name="T:IndiePortable.Collections.IViewSelector">
            <summary>
            Provides a selector interface for types that provide mechanisms for creating view types.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.IViewSelector.GetView(System.Object)">
            <summary>
            Gets the view for the specified object.
            </summary>
            <param name="value">
                The value that shall be viewed.
            </param>
            <returns>
                Returns the <see cref="T:IndiePortable.Collections.IViewType`1" /> that provides a view on <paramref name="value" />.
            </returns>
        </member>
        <member name="T:IndiePortable.Collections.IViewType`1">
            <summary>
            Defines a view type for a specified type.
            </summary>
            <typeparam name="T">
                The type of the object that shall be viewed. Must be a class.
            </typeparam>
        </member>
        <member name="P:IndiePortable.Collections.IViewType`1.Model">
            <summary>
            Gets the model associated with the view model type.
            </summary>
            <value>
                Contains the model associated with the view model type.
            </value>
        </member>
        <member name="T:IndiePortable.Collections.Linq.Enumerable">
            <summary>
            Provides extension methods to <see cref="T:System.Collections.Generic.IEnumerable`1" /> implementations.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.Linq.Enumerable.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Executes an action for each element in a collection.
            </summary>
            <typeparam name="T">
                The type of the element.
            </typeparam>
            <param name="source">
                The source <see cref="T:System.Collections.Generic.IEnumerable`1" />.
                Must not be <c>null</c>.
            </param>
            <param name="action">
                The action that shall be executed for each element in <paramref name="source" />.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if:</para>
                <para>  - <paramref name="source" /> is <c>null</c>.</para>
                <para>  - <paramref name="action" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.Linq.Enumerable.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int64})">
            <summary>
            Executes an action for each element in a collection.
            </summary>
            <typeparam name="T">
                The type of the element.
            </typeparam>
            <param name="source">
                The source <see cref="T:System.Collections.Generic.IEnumerable`1" />.
                Must not be <c>null</c>.
            </param>
            <param name="action">
                The action that shall be executed for each element in <paramref name="source" />.
                Gets the element itself and its index passed.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if:</para>
                <para>  - <paramref name="source" /> is <c>null</c>.</para>
                <para>  - <paramref name="action" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="T:IndiePortable.Collections.ObservableArrayDictionary`2">
            <summary>
            Represents an array-based dictionary that notifies about changes.
            </summary>
            <typeparam name="TKey">
                The type of the key.
            </typeparam>
            <typeparam name="TValue">
                The type of the value.
            </typeparam>
            <remarks>
                Derives from <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </remarks>
        </member>
        <member name="F:IndiePortable.Collections.ObservableArrayDictionary`2.isDisposed">
            <summary>
            Determines whether the <see cref="T:IndiePortable.Collections.ObservableArrayDictionary`2" /> is disposed.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.ObservableArrayDictionary`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.ObservableArrayDictionary`2" /> class.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.ObservableArrayDictionary`2.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.ObservableArrayDictionary`2" /> class.
            </summary>
            <param name="capacity">
                The capacity of the <see cref="T:IndiePortable.Collections.ObservableArrayDictionary`2" />. Must be greater than 0.
            </param>
        </member>
        <member name="E:IndiePortable.Collections.ObservableArrayDictionary`2.CollectionChanged">
            <summary>
            Raised when the collection has been modified.
            </summary>
            <remarks>
                Implements <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableArrayDictionary`2.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:IndiePortable.Collections.ObservableArrayDictionary`2.CollectionChanged" /> event.
            </summary>
            <param name="e">
                Contains additional information for the event handlers.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ObservableArrayDictionary`2.AddItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Adds an item to the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
            <param name="item">
                The item that shall be added.
            </param>
            <remarks>
                Overrides <see cref="M:IndiePortable.Collections.ArrayDictionary`2.AddItem(System.Collections.Generic.KeyValuePair{`0,`1})" />.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableArrayDictionary`2.ClearItems">
            <summary>
            Removes all items from the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
            <remarks>
                Overrides <see cref="M:IndiePortable.Collections.ArrayDictionary`2.ClearItems" />.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableArrayDictionary`2.ReplaceItem(`0,`1)">
            <summary>
            Replaces the value associated with the specified key by a new value.
            </summary>
            <param name="key">
                The key that is associated with the old value.
            </param>
            <param name="newValue">
                The new value for <paramref name="key" />.
            </param>
            <remarks>
                Overrides <see cref="M:IndiePortable.Collections.ArrayDictionary`2.ReplaceItem(`0,`1)" />.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableArrayDictionary`2.RemoveItem(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Removes the specified item from the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
            <param name="item">
                The item that shall be removed.
            </param>
            <returns>
                Returns a value indicating whether the specified item could be found.
            </returns>
            <remarks>
                Overrides <see cref="M:IndiePortable.Collections.ArrayDictionary`2.RemoveItem(System.Collections.Generic.KeyValuePair{`0,`1})" />.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableArrayDictionary`2.RemoveItem(`0)">
            <summary>
            Removes the item with the specified key from the <see cref="T:IndiePortable.Collections.ArrayDictionary`2" />.
            </summary>
            <param name="key">
                The key of the item that shall be removed.
            </param>
            <returns>
                Returns a value indicating whether an item with the specified <paramref name="key" /> could be found.
            </returns>
            <remarks>
                Overrides <see cref="M:IndiePortable.Collections.ArrayDictionary`2.RemoveItem(`0)" />.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableArrayDictionary`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
            <remarks>
                <para>Overrides <see cref="M:IndiePortable.Collections.ArrayDictionary`2.Dispose(System.Boolean)" />.</para>
            </remarks>
        </member>
        <member name="T:IndiePortable.Collections.ObservableDynamicArray`1">
            <summary>
            Provides a dynamic array that raises an event when the array has been changed.
            </summary>
            <typeparam name="T">
                The type of the elements.
            </typeparam>
            <remarks>
                Derives from <see cref="T:IndiePortable.Collections.DynamicArray`1" />.<para />
                Implements <see cref="T:System.ComponentModel.INotifyPropertyChanged" />, <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" />, <see cref="T:IndiePortable.Formatter.ISerializable" />.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableDynamicArray`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" /> class.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.ObservableDynamicArray`1.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" /> class.
            </summary>
            <param name="growthRate">
                The growth rate of the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" />.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ObservableDynamicArray`1.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" /> class.
            </summary>
            <param name="capacity">
                The initial capacity of the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" />.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ObservableDynamicArray`1.#ctor(System.Int32,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" /> class.
            </summary>
            <param name="capacity">
                The initial capacity of the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" />.
            </param>
            <param name="growthRate">
                The growth rate of the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" />.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ObservableDynamicArray`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" /> class.
            </summary>
            <param name="items">
                The initial items of the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" />.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ObservableDynamicArray`1.#ctor(System.Double,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" /> class.
            </summary>
            <param name="growthRate">
                The growth rate of the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" />.
            </param>
            <param name="items">
                The initial items of the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" />.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ObservableDynamicArray`1.#ctor(IndiePortable.Formatter.ObjectDataCollection)">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" /> class.
            </summary>
            <param name="data">
                The serialized data for the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" />.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ObservableDynamicArray`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" /> class.
            </summary>
        </member>
        <member name="E:IndiePortable.Collections.ObservableDynamicArray`1.PropertyChanged">
            <summary>
            Raised when a property of the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" /> has been changed.
            </summary>
            <remarks>
                Implements <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> implicitly.
            </remarks>
        </member>
        <member name="E:IndiePortable.Collections.ObservableDynamicArray`1.CollectionChanged">
            <summary>
            Raised when the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" /> has been changed.
            </summary>
            <remarks>
                Implements <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableDynamicArray`1.GetObjectData(IndiePortable.Formatter.ObjectDataCollection)">
            <summary>
            Gets the object data of the <see cref="T:IndiePortable.Collections.DynamicArray`1" />.
            </summary>
            <param name="data">The data that shall be serialized.</param>
            <remarks>
                <para>Implements <see cref="M:IndiePortable.Formatter.ISerializable.GetObjectData(IndiePortable.Formatter.ObjectDataCollection)" /> implicitly.</para>
                <para>Overrides <see cref="M:IndiePortable.Collections.DynamicArray`1.GetObjectData(IndiePortable.Formatter.ObjectDataCollection)" />.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableDynamicArray`1.RaisePropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:IndiePortable.Collections.ObservableDynamicArray`1.PropertyChanged" /> event.
            </summary>
            <param name="property">
                The name of the changed property.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ObservableDynamicArray`1.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:IndiePortable.Collections.ObservableDynamicArray`1.CollectionChanged" /> event.
            </summary>
            <param name="e">
                Contains additional information for the event handlers.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ObservableDynamicArray`1.AddItem(`0)">
            <summary>
            Adds an item at the end of the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" />.
            </summary>
            <param name="item">
                The item that shall be added.
            </param>
            <remarks>
                Overrides <see cref="M:IndiePortable.Collections.DynamicArray`1.AddItem(`0)" />.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableDynamicArray`1.InsertItem(System.Int32,`0)">
            <summary>
            Inserts an item at a specified position in the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" />.
            </summary>
            <param name="index">
                The index where the item shall be placed.
            </param>
            <param name="item">
                The item that shall be inserted.
            </param>
            <remarks>
                Overrides <see cref="M:IndiePortable.Collections.DynamicArray`1.InsertItem(System.Int32,`0)" />.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableDynamicArray`1.RemoveItem(System.Int32)">
            <summary>
            Removes the item at the specified index.
            </summary>
            <param name="index">
                The index of the item that shall be removed.
            </param>
            <remarks>
                Overrides <see cref="M:IndiePortable.Collections.DynamicArray`1.RemoveItem(System.Int32)" />.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="index" /> is smaller that 0 or greater or equals <see cref="P:IndiePortable.Collections.DynamicArray`1.Count" />.
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.ObservableDynamicArray`1.ReplaceItem(System.Int32,`0)">
            <summary>
            Replaces the item at the specified index.
            </summary>
            <param name="index">
                The index of the item that shall be replaced.
            </param>
            <param name="item">
                The item that shall replace the current one.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
                Thrown when <paramref name="index" /> is smaller than 0 or greater or equals <see cref="P:IndiePortable.Collections.DynamicArray`1.Count" />.
            </exception>
            <remarks>
                Overrides <see cref="M:IndiePortable.Collections.DynamicArray`1.ReplaceItem(System.Int32,`0)" />.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableDynamicArray`1.ResetItems">
            <summary>
            Resets the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" /> to 0 items.
            </summary>
            <remarks>
                Overrides <see cref="M:IndiePortable.Collections.DynamicArray`1.ResetItems" />.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableDynamicArray`1.AssureLock">
            <summary>
            Assures the lock of the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" />.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.ObservableDynamicArray`1.Lock">
            <summary>
            Locks the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" />.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.ObservableDynamicArray`1.Unlock">
            <summary>
            Unlocks the <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" />.
            </summary>
        </member>
        <member name="T:IndiePortable.Collections.ObservableListWrapper`1">
            <summary>
            Represents a wrapper for an <see cref="T:System.Collections.Generic.IList`1" /> instance making it observable.
            </summary>
            <typeparam name="T">
                The type of the elements.
            </typeparam>
            <remarks>
                <para>
                    This is a wrapper for an <seealso cref="T:System.Collections.Generic.IList`1" /> instance. Because of that,
                    the <seealso cref="E:IndiePortable.Collections.ObservableListWrapper`1.CollectionChanged" /> event is only raised when the methods of the
                    <see cref="T:IndiePortable.Collections.ObservableListWrapper`1" /> are used for modifying the collection.
                    If you use the modification methods of the source <seealso cref="T:System.Collections.Generic.IList`1" />,
                    the <seealso cref="E:IndiePortable.Collections.ObservableListWrapper`1.CollectionChanged" /> event will not be raised.
                </para>
            </remarks>
            <seealso cref="T:IndiePortable.Collections.IObservableList`1" />
        </member>
        <member name="F:IndiePortable.Collections.ObservableListWrapper`1.source">
            <summary>
            The source <see cref="T:System.Collections.Generic.IList`1" /> that is wrapped.
            </summary>
        </member>
        <member name="F:IndiePortable.Collections.ObservableListWrapper`1.syncRootBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Collections.ObservableListWrapper`1.SyncRoot" /> property.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.ObservableListWrapper`1.#ctor(System.Collections.Generic.IList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.ObservableListWrapper`1" /> class.
            </summary>
            <param name="source">
                The source <see cref="T:System.Collections.Generic.IList`1" /> that shall be wrapped.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="source" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="E:IndiePortable.Collections.ObservableListWrapper`1.CollectionChanged">
            <summary>
            Raised when the <see cref="T:IndiePortable.Collections.ObservableListWrapper`1" /> has been changed.
            </summary>
            <remarks>
                <para>Implements <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> implicitly.</para>
            </remarks>
        </member>
        <member name="E:IndiePortable.Collections.ObservableListWrapper`1.PropertyChanged">
            <summary>
            Raised when the value of a property has been changed.
            </summary>
            <remarks>
                <para>Implements <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.ObservableListWrapper`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:IndiePortable.Collections.ObservableListWrapper`1" />.
            </summary>
            <value>
                Contains the number of elements contained in the <see cref="T:IndiePortable.Collections.ObservableListWrapper`1" />.
            </value>
            <remarks>
                <para>Implements <see cref="P:System.Collections.Generic.ICollection`1.Count" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.ObservableListWrapper`1.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:IndiePortable.Collections.ObservableListWrapper`1" /> has a fixed size.
            </summary>
            <value>
                Contains a value indicating whether the <see cref="T:IndiePortable.Collections.ObservableListWrapper`1" /> has a fixed size.
            </value>
            <remarks>
                <para>Implements <see cref="P:System.Collections.IList.IsFixedSize" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.ObservableListWrapper`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:IndiePortable.Collections.ObservableListWrapper`1" /> is read-only.
            </summary>
            <value>
                Contains a value indicating whether the <see cref="T:IndiePortable.Collections.ObservableListWrapper`1" /> is read-only.
            </value>
            <remarks>
                <para>Implements <see cref="P:System.Collections.Generic.ICollection`1.IsReadOnly" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.ObservableListWrapper`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:IndiePortable.Collections.ObservableListWrapper`1" /> is synchronized (thread safe).
            </summary>
            <value>
                Contains a value indicating whether access to the <see cref="T:IndiePortable.Collections.ObservableListWrapper`1" /> is synchronized (thread safe).
            </value>
            <remarks>
                <para>Implements <see cref="P:System.Collections.ICollection.IsSynchronized" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.ObservableListWrapper`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:IndiePortable.Collections.ObservableListWrapper`1" />.
            </summary>
            <value>
                Contains an object that can be used to synchronize access to the <see cref="T:IndiePortable.Collections.ObservableListWrapper`1" />.
            </value>
            <remarks>
                <para>Implements <see cref="P:System.Collections.ICollection.SyncRoot" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.ObservableListWrapper`1.Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <value>
                Contains the item at the specified index.
            </value>
            <param name="index">
                The zero-based index of the item to get or set.
            </param>
            <returns>
                Returns the element at the specified index.
            </returns>
            <remarks>
                <para>Implements <see cref="P:System.Collections.Generic.IList`1.Item(System.Int32)" /> implicitly.</para>
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>Thrown if <paramref name="index" /> is smaller than <c>0</c> or greater or equals <see cref="P:IndiePortable.Collections.ObservableListWrapper`1.Count" />.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
                <para>Thrown if the source <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</para>
            </exception>
        </member>
        <member name="P:IndiePortable.Collections.ObservableListWrapper`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the item at the specified index.
            </summary>
            <value>
                Contains the item at the specified index.
            </value>
            <param name="index">
                The zero-based index of the item to get or set.
            </param>
            <returns>
                Returns the element at the specified index.
            </returns>
            <remarks>
                <para>Implements <see cref="P:System.Collections.IList.Item(System.Int32)" /> implicitly.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
                <para>Thrown if <paramref name="value" /> is not convertible to <typeparamref name="T" />.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>Thrown if <paramref name="index" /> is smaller than <c>0</c> or greater or equals <see cref="P:IndiePortable.Collections.ObservableListWrapper`1.Count" />.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
                <para>Thrown if the source <see cref="T:System.Collections.Generic.IList`1" /> is read-only.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.ObservableListWrapper`1.Add(System.Object)">
            <summary>
            Adds a value to the source <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="value">
                The item to add.
            </param>
            <returns>
                Returns the index of the added item.
            </returns>
            <exception cref="T:System.ArgumentException">
                <para>Thrown if <paramref name="value" /> is not of type <typeparamref name="T" />.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
                <para>Thrown if the source <see cref="T:System.Collections.Generic.IList`1" /> has a fixed size and/or is read-only.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.ObservableListWrapper`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:IndiePortable.Collections.ObservableListWrapper`1" />.
            </summary>
            <param name="item">
                The item to insert into the <see cref="T:IndiePortable.Collections.ObservableListWrapper`1" />.
            </param>
            <remarks>
                <para>Implements <see cref="M:System.Collections.Generic.ICollection`1.Add(`0)" /> implicitly.</para>
            </remarks>
            <exception cref="T:System.NotSupportedException">
                <para>Thrown if the base list has a fixed size or is read-only.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.ObservableListWrapper`1.Clear">
            <summary>
            Removes all items from the source <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <remarks>
                <para>Implements <see cref="M:System.Collections.Generic.ICollection`1.Clear" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableListWrapper`1.Contains(System.Object)">
            <summary>
            Determines whether the source <see cref="T:System.Collections.Generic.IList`1" /> contains a specified item.
            </summary>
            <param name="value">
                The item to locate in the source <see cref="T:System.Collections.Generic.IList`1" />.
            </param>
            <returns>
                <c>true</c> if the source <see cref="T:System.Collections.Generic.IList`1" /> contains <paramref name="value" />; otherwise <c>false</c>.
            </returns>
            <remarks>
                <para>Implements <see cref="M:System.Collections.IList.Contains(System.Object)" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableListWrapper`1.Contains(`0)">
            <summary>
            Determines whether the source <see cref="T:System.Collections.Generic.IList`1" /> contains a specified item.
            </summary>
            <param name="item">
                The item to locate in the source <see cref="T:System.Collections.Generic.IList`1" />.
            </param>
            <returns>
                <c>true</c> if the source <see cref="T:System.Collections.Generic.IList`1" /> contains <paramref name="item" />; otherwise <c>false</c>.
            </returns>
            <remarks>
                <para>Implements <see cref="M:System.Collections.Generic.ICollection`1.Contains(`0)" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableListWrapper`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the items of the source <see cref="T:System.Collections.Generic.IList`1" /> to an <see cref="T:System.Array" />
            starting at a particular array index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array" /> that is the destination of the items
                copied from the source <see cref="T:System.Collections.Generic.IList`1" />. It must have zero-based indexing.
            </param>
            <param name="index">
                The zero-based index at which the copying begins.
            </param>
            <remarks>
                <para>Implements <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" /> implicitly.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="array" /> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>Thrown if <paramref name="index" /> is less than <c>0</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>Thrown if:</para>
                <para>
                    - the number of elements in the source <see cref="T:System.Collections.Generic.IList`1" /> is greater than the available space
                      from <paramref name="index"/> to the end of <paramref name="array" />.
                </para>
                <para>
                    - <paramref name="array" /> is not a one-dimensional array of type <typeparamref name="T" />.
                </para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.ObservableListWrapper`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the items of the source <see cref="T:System.Collections.Generic.IList`1" /> to a one-dimensional <typeparamref name="T" /> array
            starting at a particular array index.
            </summary>
            <param name="array">
                The one-dimensional <typeparamref name="T" /> array that is the destination of the items
                copied from the source <see cref="T:System.Collections.Generic.IList`1" />. It must have zero-based indexing.
            </param>
            <param name="arrayIndex">
                The zero-based index at which the copying begins.
            </param>
            <remarks>
                <para>Implements <see cref="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)" /> implicitly.</para>
            </remarks>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="array" /> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>Thrown if <paramref name="arrayIndex" /> is less than <c>0</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>Thrown if:</para>
                <para>
                    - the number of elements in the source <see cref="T:System.Collections.Generic.IList`1" /> is greater than the available space
                      from <paramref name="arrayIndex"/> to the end of <paramref name="array" />.
                </para>
                <para>
                    - <paramref name="array" /> is not a one-dimensional array of type <typeparamref name="T" />.
                </para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.ObservableListWrapper`1.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the <see cref="T:IndiePortable.Collections.ObservableListWrapper`1" />.
            </summary>
            <returns>
                Returns an enumerator that iterates through the <see cref="T:IndiePortable.Collections.ObservableListWrapper`1" />.
            </returns>
            <remarks>
                <para>Implements <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableListWrapper`1.IndexOf(System.Object)">
            <summary>
            Determines the index of a specified item in the source <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="value">
                The item to locate in the source <see cref="T:System.Collections.Generic.IList`1" />.
            </param>
            <returns>
                Returns the index of <paramref name="value" /> if found
                in the source <see cref="T:System.Collections.Generic.IList`1" />; otherwise <c>-1</c>.
            </returns>
            <remarks>
                <para>Implements <see cref="M:System.Collections.IList.IndexOf(System.Object)" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableListWrapper`1.IndexOf(`0)">
            <summary>
            Determines the index of a specified item in the source <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">
                The item to locate in the source <see cref="T:System.Collections.Generic.IList`1" />.
            </param>
            <returns>
                Returns the index of <paramref name="item" /> if found
                in the source <see cref="T:System.Collections.Generic.IList`1" />; otherwise <c>-1</c>.
            </returns>
            <remarks>
                <para>Implements <see cref="M:System.Collections.Generic.IList`1.IndexOf(`0)" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableListWrapper`1.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the source <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">
                The zero-based index where <paramref name="value" /> should be inserted.
            </param>
            <param name="value">
                The value to insert into the source list.
            </param>
            <exception cref="T:System.ArgumentException">
                <para>Thrown if <paramref name="value" /> is not of type <typeparamref name="T" />.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>Thrown if <paramref name="index" /> is less than <c>0</c> or greater than <see cref="P:IndiePortable.Collections.ObservableListWrapper`1.Count" />.</para>
            </exception>
            <exception cref="T:System.NotSupportedException">
                <para>Thrown if the source list has a fixed size and/or is read-only.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.ObservableListWrapper`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the source <see cref="T:System.Collections.Generic.IList`1" /> at the specified index.
            </summary>
            <param name="index">
                The zero-based index where <paramref name="item" /> should be inserted.
            </param>
            <param name="item">
                The item to insert into the source list.
            </param>
            <exception cref="T:System.NotSupportedException">
                <para>Thrown if the source list has a fixed size and/or is read-only.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>Thrown if <paramref name="index" /> is less than <c>0</c> or greater than <see cref="P:IndiePortable.Collections.ObservableListWrapper`1.Count" />.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.ObservableListWrapper`1.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific item from the source <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="value">
                The item to remove from the source <see cref="T:System.Collections.Generic.IList`1" />.
            </param>
            <remarks>
                <para>Implements <see cref="M:System.Collections.IList.Remove(System.Object)" /> implicitly.</para>
            </remarks>
            <exception cref="T:System.ArgumentException">
                <para>Thrown if <paramref name="value" /> is not of the generic type parameter <typeparamref name="T" />.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.ObservableListWrapper`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific item from the source <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="item">
                The item to remove from the source <see cref="T:System.Collections.Generic.IList`1" />.
            </param>
            <returns>
                Returns <c>true</c> if <paramref name="item" /> was successfully removed
                from the source <see cref="T:System.Collections.Generic.IList`1" />; otherwise <c>false</c>.
                This method also returns <c>false</c> if <paramref name="item" />
                was not found in the original source <see cref="T:System.Collections.Generic.IList`1" />.
            </returns>
            <remarks>
                <para>Implements <see cref="M:System.Collections.Generic.ICollection`1.Remove(`0)" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableListWrapper`1.RemoveAt(System.Int32)">
            <summary>
            Removes the item at the specified position in the source <see cref="T:System.Collections.Generic.IList`1" />.
            </summary>
            <param name="index">
                The zero-based index of the item to remove.
            </param>
            <remarks>
                <para>Implements <see cref="M:System.Collections.Generic.IList`1.RemoveAt(System.Int32)" /> implicitly.</para>
            </remarks>
            <exception cref="T:System.NotSupportedException">
                <para>Thrown if the source <see cref="T:System.Collections.Generic.IList`1" /> has a fixed size and/or is read-only.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>Thrown if <paramref name="index" /> is less than <c>0</c> or greater or equals <see cref="P:IndiePortable.Collections.ObservableListWrapper`1.Count" />.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.ObservableListWrapper`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <remarks>
                <para>Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> explicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableListWrapper`1.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:IndiePortable.Collections.ObservableListWrapper`1.CollectionChanged" /> event.
            </summary>
            <param name="args">
                Contains additional information for the event handler.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ObservableListWrapper`1.RaisePropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:IndiePortable.Collections.ObservableListWrapper`1.PropertyChanged" /> event.
            </summary>
            <param name="property">
                The name of the changed property.
            </param>
        </member>
        <member name="T:IndiePortable.Collections.ObservableQueue`1">
            <summary>
            Represents a queue that notifies subscribers when changes apply.
            </summary>
            <typeparam name="T">
                The type of the items in the <see cref="T:IndiePortable.Collections.ObservableQueue`1" />.
            </typeparam>
            <seealso cref="T:System.Collections.ICollection" />
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
            <seealso cref="T:System.Collections.IEnumerable" />
            <seealso cref="T:IndiePortable.Formatter.ISerializable" />
        </member>
        <member name="M:IndiePortable.Collections.ObservableQueue`1.#ctor(System.Collections.Generic.Queue{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.ObservableQueue`1" /> class.
            </summary>
            <param name="source">
                The <see cref="T:System.Collections.Generic.Queue`1" /> that shall be wrapped.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="source" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="E:IndiePortable.Collections.ObservableQueue`1.ItemEnqueued">
            <summary>
            Raised when an item has been enqueued to the <see cref="T:IndiePortable.Collections.ObservableQueue`1" />.
            </summary>
        </member>
        <member name="E:IndiePortable.Collections.ObservableQueue`1.ItemDequeued">
            <summary>
            Raised when an item has been dequeued from the <see cref="T:IndiePortable.Collections.ObservableQueue`1" />.
            </summary>
        </member>
        <member name="P:IndiePortable.Collections.ObservableQueue`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:IndiePortable.Collections.ObservableQueue`1" />.
            </summary>
            <value>
                Contains the number of elements contained in the <see cref="T:IndiePortable.Collections.ObservableQueue`1" />.
            </value>
            <remarks>
                <para>Implements <see cref="P:System.Collections.ICollection.Count" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.ObservableQueue`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:IndiePortable.Collections.ObservableQueue`1" /> is synchronized (thread safe).
            </summary>
            <value>
                Contains a value indicating whether access to the <see cref="T:IndiePortable.Collections.ObservableQueue`1" /> is synchronized (thread safe).
            </value>
            <remarks>
                <para>Implements <see cref="P:System.Collections.ICollection.IsSynchronized" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.ObservableQueue`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:IndiePortable.Collections.ObservableQueue`1" />.
            </summary>
            <value>
                Contains an object that can be used to synchronize access to the <see cref="T:IndiePortable.Collections.ObservableQueue`1" />.
            </value>
            <remarks>
                <para>Implements <see cref="P:System.Collections.ICollection.SyncRoot" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableQueue`1.Enqueue(`0)">
            <summary>
            Inserts the item at the end of the <see cref="T:IndiePortable.Collections.ObservableQueue`1" />.
            </summary>
            <param name="item">
                The item that shall be enqueued.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ObservableQueue`1.Dequeue">
            <summary>
            Removes the first item of the <see cref="T:IndiePortable.Collections.ObservableQueue`1" /> and returns it.
            </summary>
            <returns>
                Returns the dequeued item.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if the <see cref="T:IndiePortable.Collections.ObservableQueue`1" /> is empty.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.ObservableQueue`1.Peek">
            <summary>
            Returns the first item of the <see cref="T:IndiePortable.Collections.ObservableQueue`1" /> without removing it.
            </summary>
            <returns>
                Returns the peeked item.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if the <see cref="T:IndiePortable.Collections.ObservableQueue`1" /> is empty.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.ObservableQueue`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:IndiePortable.Collections.ObservableQueue`1" /> contains a specified item.
            </summary>
            <param name="item">
                The item that shall be looked for.
            </param>
            <returns>
                <c>true</c> if the <see cref="T:IndiePortable.Collections.ObservableQueue`1" /> contains <paramref name="item" />; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:IndiePortable.Collections.ObservableQueue`1.Clear">
            <summary>
            Clears the <see cref="T:IndiePortable.Collections.ObservableQueue`1" />.
            </summary>
            <remarks>
                <para>Implements <see cref="M:System.Collections.Generic.ICollection`1.Clear" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableQueue`1.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:IndiePortable.Collections.ObservableQueue`1" /> to an <see cref="T:System.Array" />, starting at a particular <see cref="T:System.Array" /> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from <see cref="T:IndiePortable.Collections.ObservableQueue`1" />.
                The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
            <param name="index">
                The zero-based index in <paramref name="array" /> at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="array" /> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>Thrown if <paramref name="index" /> is less than <c>0</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>Thrown if at least one of the following conditions applies:</para>
                <list type="bullet">
                    <item><paramref name="array" /> is multidimensional.</item>
                    <item>
                        The number of elements in the <see cref="T:IndiePortable.Collections.ObservableQueue`1" /> is greater than the available space
                        from <paramref name="index" /> to the end of <paramref name="array" />.
                    </item>
                    <item>
                        The type of the <see cref="T:IndiePortable.Collections.ObservableQueue`1" /> cannot be cast
                        automatically to the type of <paramref name="array" />.
                    </item>
                </list>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.ObservableQueue`1.GetObjectData(IndiePortable.Formatter.ObjectDataCollection)">
            <summary>
            Populates a specified <see cref="T:IndiePortable.Formatter.ObjectDataCollection" /> instance
            with data from the <see cref="T:IndiePortable.Collections.ObservableQueue`1" /> instance.
            </summary>
            <param name="data">
                The <see cref="T:IndiePortable.Formatter.ObjectDataCollection" /> that shall be populated.
                Must not be <c>null</c>.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="data" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.ObservableQueue`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <remarks>
                <para>Implements <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
            <remarks>
                <para>Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ObservableQueue`1.RaiseItemEnqueued">
            <summary>
            Raises the <see cref="E:IndiePortable.Collections.ObservableQueue`1.ItemEnqueued" /> event.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.ObservableQueue`1.RaiseItemDequeued">
            <summary>
            Raises the <see cref="E:IndiePortable.Collections.ObservableQueue`1.ItemDequeued" /> event.
            </summary>
        </member>
        <member name="T:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1">
            <summary>
            Provides a read-only wrapper around a <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" />.
            </summary>
            <typeparam name="T">
                The type of the elements of the <see cref="T:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1" />.
            </typeparam>
            <seealso cref="T:IndiePortable.Collections.IObservableReadOnlyList`1" />
            <seealso cref="T:System.Collections.Specialized.INotifyCollectionChanged" />
            <seealso cref="T:System.ComponentModel.INotifyPropertyChanged" />
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="F:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.source">
            <summary>
            The source <see cref="T:IndiePortable.Collections.IObservableList`1" />.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.#ctor(IndiePortable.Collections.IObservableList{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1" /> class.
            </summary>
            <param name="source">
                The source <see cref="T:IndiePortable.Collections.IObservableList`1" /> that shall be wrapped.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="source" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1" /> class.
            </summary>
        </member>
        <member name="E:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.CollectionChanged">
            <summary>
            Raised when the collection has been changed.
            </summary>
            <remarks>
                <para>Implements <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> implicitly.</para>
            </remarks>
        </member>
        <member name="E:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.PropertyChanged">
            <summary>
            Raised when the value of a property has been changed.
            </summary>
            <remarks>
                <para>Implements <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.Count">
            <summary>
            Gets the number of elements in the <see cref="T:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1" />.
            </summary>
            <value>
                Contains the number of elements in the <see cref="T:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1" />.
            </value>
            <remarks>
                <para>Implements <see cref="P:System.Collections.Generic.IReadOnlyCollection`1.Count" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.Item(System.Int32)">
            <summary>
            Gets the <typeparamref name="T"/> at the specified index.
            </summary>
            <value>
                Contains he <typeparamref name="T" /> at the specified index.
            </value>
            <param name="index">The index.</param>
            <returns>
                Returns he <typeparamref name="T" /> at the specified index in the <see cref="T:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1" />.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>Thrown if <paramref name="index" /> is smaller than <c>0</c> or greater or equals <see cref="P:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.Count" />.</para>
            </exception>
            <remarks>
                <para>Implements <see cref="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1" />.
            </summary>
            <returns>
                An <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the <see cref="T:System.Collections.IEnumerable" />.
            </summary>
            <returns>
                An <see cref="T:System.Collections.IEnumerator" /> that can be used to iterate through the <see cref="T:System.Collections.IEnumerable" />.
            </returns>
        </member>
        <member name="M:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.Dispose">
            <summary>
            Releases all resources reserved by the <see cref="T:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1" />.
            </summary>
            <remarks>
                <para>Implements <see cref="M:System.IDisposable.Dispose" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="managed">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.RaisePropertyChanged(System.String)">
            <summary>
            Raises the <see cref="E:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.PropertyChanged" /> event.
            </summary>
            <param name="property">
                The name of the changed property.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.CollectionChanged" /> event.
            </summary>
            <param name="args">
                The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs" /> for the event handlers.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.Source_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event of <see cref="F:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.source" />.
            </summary>
            <param name="sender">
                The sender of the event.
            </param>
            <param name="e">
                Contains additional information for the event handler.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.Source_PropertyChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handles the <see cref="E:System.ComponentModel.INotifyPropertyChanged.PropertyChanged" /> event of <see cref="F:IndiePortable.Collections.ReadOnlyObservableDynamicArray`1.source" />.
            </summary>
            <param name="sender">
                The sender of the event.
            </param>
            <param name="e">
                The <see cref="T:System.ComponentModel.PropertyChangedEventArgs"/> instance containing the event data.
            </param>
        </member>
        <member name="T:IndiePortable.Collections.DequeqeOnlyQueue`1">
            <summary>
            Represents a queue where items can only be dequeued.
            </summary>
            <typeparam name="T">
                The type of the items in the <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" />.
            </typeparam>
            <seealso cref="T:System.Collections.Generic.IEnumerable`1" />
            <seealso cref="T:System.Collections.ICollection" />
            <seealso cref="T:System.Collections.IEnumerable" />
        </member>
        <member name="F:IndiePortable.Collections.DequeqeOnlyQueue`1.source">
            <summary>
            The source <see cref="T:System.Collections.Generic.Queue`1" />.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.DequeqeOnlyQueue`1.#ctor(System.Collections.Generic.Queue{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" /> class.
            </summary>
            <param name="source">
                The source <see cref="T:System.Collections.Generic.Queue`1" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="source" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="P:IndiePortable.Collections.DequeqeOnlyQueue`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" />.
            </summary>
            <value>
                Contains the number of elements contained in the <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" />.
            </value>
            <remarks>
                <para>Implements <see cref="P:System.Collections.ICollection.Count" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.DequeqeOnlyQueue`1.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" /> is synchronized (thread safe).
            </summary>
            <value>
                Contains a value indicating whether access to the <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" /> is synchronized (thread safe).
            </value>
            <remarks>
                <para>Implements <see cref="P:System.Collections.ICollection.IsSynchronized" /> implicitly.</para>
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.DequeqeOnlyQueue`1.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" />.
            </summary>
            <value>
                Contains an object that can be used to synchronize access to the <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" />.
            </value>
            <remarks>
                <para>Implements <see cref="P:System.Collections.ICollection.SyncRoot" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DequeqeOnlyQueue`1.Dequeue">
            <summary>
            Returns and removes the object at the beginning of the <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" />.
            </summary>
            <returns>
                The object that is removed from the beginning of the <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if the <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" /> is empty.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.DequeqeOnlyQueue`1.Peek">
            <summary>
            Returns the object at the beginning of the<see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" /> without removing it.
            </summary>
            <returns>
                The object at the beginning of the <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" />.
            </returns>
            <exception cref="T:System.InvalidOperationException">
                <para>Thrown if the <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" /> is empty.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.DequeqeOnlyQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" /> to an <see cref="T:System.Array" />,
            starting at the specified <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
                from <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" />. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
            <param name="arrayIndex">
                The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="array" /> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>Thrown if <paramref name="arrayIndex" /> is less than <c>0</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>
                    Thrown if the number of elements in the source <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" />
                    is greater than the available space from index to the end of the destination array.
                </para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.DequeqeOnlyQueue`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection" /> to an <see cref="T:System.Array" />,
            starting at a particular <see cref="T:System.Array"/> index.
            </summary>
            <param name="array">
                The one-dimensional <see cref="T:System.Array"/> that is the destination of the elements copied
                from <see cref="T:System.Collections.ICollection" />. The <see cref="T:System.Array" /> must have zero-based indexing.
            </param>
            <param name="index">
                The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if <paramref name="array" /> is <c>null</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
                <para>Thrown if <paramref name="index" /> is less than <c>0</c>.</para>
            </exception>
            <exception cref="T:System.ArgumentException">
                <para>Thrown if:</para>
                <para>
                    - <paramref name="array" /> is multidimensional.
                </para>
                <para>
                    - the number of elements in the source <see cref="T:System.Collections.ICollection" />
                    is greater than the available space from index to the end of the destination array.
                </para>
                <para>
                    - The type of the source <see cref="T:System.Collections.ICollection" /> cannot
                    be cast automatically to the type of the destination array.
                </para>
            </exception>
            <remarks>
                <para>Implements <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" /> explicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DequeqeOnlyQueue`1.GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" />.
            </summary>
            <returns>
                Returns an enumerator that iterates through the <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" />.
            </returns>
            <remarks>
                <para>Implements <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" /> implicitly.</para>
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.DequeqeOnlyQueue`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator that iterates through the <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" />.
            </summary>
            <returns>
                Returns an enumerator that iterates through the <see cref="T:IndiePortable.Collections.DequeqeOnlyQueue`1" />.
            </returns>
            <remarks>
                <para>Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> explicitly.</para>
            </remarks>
        </member>
        <member name="T:IndiePortable.Collections.ViewObservableDynamicArray`2">
            <summary>
            Provides a Model-View-View Model (MVVM) compatible observable dynamic array with an input type and an output type.
            </summary>
            <typeparam name="TIn">
                The type of the model items that shall be viewed.
            </typeparam>
            <typeparam name="TOut">
                The view type of the items.
            </typeparam>
            <remarks>
                <para>Implements <see cref="T:IndiePortable.Collections.IObservableReadOnlyList`1" />, <see cref="T:System.IDisposable" /> explicitly.</para>
                <para>
                    Implements <see cref="T:System.Collections.Generic.IReadOnlyList`1" />, <see cref="T:System.Collections.Specialized.INotifyCollectionChanged" />
                    implicitly through <see cref="T:IndiePortable.Collections.IObservableReadOnlyList`1"/>
                </para>
                <para>
                    Implements <see cref="T:System.Collections.Generic.IReadOnlyCollection`1" />, <see cref="T:System.Collections.Generic.IEnumerable`1" />, <see cref="T:System.Collections.IEnumerable" />
                    implicitly through <see cref="T:System.Collections.Generic.IReadOnlyList`1" />.
                </para>
            </remarks>
        </member>
        <member name="F:IndiePortable.Collections.ViewObservableDynamicArray`2.semaphore">
            <summary>
            The <see cref="T:System.Threading.SemaphoreSlim" /> that synchronizes the thread access on the <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2" />.
            </summary>
        </member>
        <member name="F:IndiePortable.Collections.ViewObservableDynamicArray`2.sourceBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Collections.ViewObservableDynamicArray`2.Source" /> property.
            </summary>
        </member>
        <member name="F:IndiePortable.Collections.ViewObservableDynamicArray`2.mapping">
            <summary>
            The <see cref="T:IndiePortable.Collections.ArrayDictionary`2" /> that maps between the source and the destination object.
            </summary>
        </member>
        <member name="F:IndiePortable.Collections.ViewObservableDynamicArray`2.viewModels">
            <summary>
            The <see cref="T:IndiePortable.Collections.DynamicArray`1" /> containing the view models.
            </summary>
        </member>
        <member name="F:IndiePortable.Collections.ViewObservableDynamicArray`2.isDisposedBacking">
            <summary>
            The backing field for the <see cref="P:IndiePortable.Collections.ViewObservableDynamicArray`2.IsDisposed" /> property.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.ViewObservableDynamicArray`2.#ctor(IndiePortable.Collections.ObservableDynamicArray{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2" /> class.
            </summary>
            <param name="source">
                The source <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" />.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if:</para>
                <para>  - <paramref name="source" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.ViewObservableDynamicArray`2.#ctor(IndiePortable.Collections.ObservableDynamicArray{`0},System.Func{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2" /> class.
            </summary>
            <param name="source">
                The source <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" />.
            </param>
            <param name="viewModelGenerator">
                The method callback used for generating the view models.
            </param>
            <exception cref="T:System.ArgumentNullException">
                <para>Thrown if:</para>
                <para>  - <paramref name="source" /> is <c>null</c>.</para>
                <para>  - <paramref name="viewModelGenerator" /> is <c>null</c>.</para>
            </exception>
        </member>
        <member name="M:IndiePortable.Collections.ViewObservableDynamicArray`2.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2" /> class.
            </summary>
        </member>
        <member name="E:IndiePortable.Collections.ViewObservableDynamicArray`2.CollectionChanged">
            <summary>
            Raised when the <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2" /> has been changed.
            </summary>
            <remarks>
                Implements <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> implicitly.
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.ViewObservableDynamicArray`2.IsDisposed">
            <summary>
            Gets a value indicating whether the <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2" /> has been disposed.
            </summary>
            <value>
                <c>true</c> if the <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2" /> has been disposed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:IndiePortable.Collections.ViewObservableDynamicArray`2.Count">
            <summary>
            Gets the number of elements in the collection.
            </summary>
            <value>
                Contains the number of elements in the collection.
            </value>
            <remarks>
                Implements <see cref="P:System.Collections.Generic.IReadOnlyCollection`1.Count" /> implicitly.
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.ViewObservableDynamicArray`2.Source">
            <summary>
            Gets the source <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" />.
            </summary>
            <value>
                Contains the source <see cref="T:IndiePortable.Collections.ObservableDynamicArray`1" />.
            </value>
        </member>
        <member name="P:IndiePortable.Collections.ViewObservableDynamicArray`2.ViewModelGeneratorCallback">
            <summary>
            Gets the method callback used for generating the view models.
            </summary>
            <value>
                Contains the method callback used for generating the view models.
            </value>
        </member>
        <member name="P:IndiePortable.Collections.ViewObservableDynamicArray`2.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
            </summary>
            <value>
                Contains a value indicating whether access to the <see cref="T:System.Collections.ICollection" /> is synchronized (thread safe).
            </value>
        </member>
        <member name="P:IndiePortable.Collections.ViewObservableDynamicArray`2.Item(System.Int32)">
            <summary>
            Gets the <typeparamref name="TOut" /> at the specified index.
            </summary>
            <value>
                Contains the <typeparamref name="TOut" /> at the specified index.
            </value>
            <param name="index">
                The index at which the item shall be returned.
            </param>
            <returns>
                Returns the <typeparamref name="TOut" /> at the specified index.
            </returns>
            <remarks>
                Implements <see cref="P:System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)" /> implicitly.
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.ViewObservableDynamicArray`2.Item(`0)">
            <summary>
            Gets the <typeparamref name="TOut"/> specified by a <typeparamref name="TIn" /> value.
            </summary>
            <value>
                Contains the <typeparamref name="TOut"/> specified by a <typeparamref name="TIn" /> value.
            </value>
            <param name="input">
                The <typeparamref name="TIn" /> value associated with the desired <typeparamref name="TOut" /> value.
            </param>
            <returns>
                Returns the <typeparamref name="TOut" /> specified by <paramref name="input" />.
            </returns>
        </member>
        <member name="M:IndiePortable.Collections.ViewObservableDynamicArray`2.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
                A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
            <remarks>
                Implements <see cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ViewObservableDynamicArray`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2.Enumerator" /> for the <see cref="T:System.Collections.IEnumerable" />.
            </summary>
            <returns>
                Returns an <see cref="T:System.Collections.IEnumerator" /> for the <see cref="T:System.Collections.IEnumerable" />.
            </returns>
            <remarks>
                Implements <see cref="M:System.Collections.IEnumerable.GetEnumerator" /> explicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ViewObservableDynamicArray`2.Dispose">
            <summary>
            Releases all resources reserved by the <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2" />.
            </summary>
            <remarks>
                Implements <see cref="M:System.IDisposable.Dispose" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ViewObservableDynamicArray`2.Dispose(System.Boolean)">
            <summary>
            Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only unmanaged resources.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ViewObservableDynamicArray`2.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises the <see cref="E:IndiePortable.Collections.ViewObservableDynamicArray`2.CollectionChanged" /> event.
            </summary>
            <param name="e">
                Contains additional information for the event handlers.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ViewObservableDynamicArray`2.Source_CollectionChanged(System.Object,System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Handles the <see cref="E:System.Collections.Specialized.INotifyCollectionChanged.CollectionChanged" /> event of <see cref="P:IndiePortable.Collections.ViewObservableDynamicArray`2.Source" />.
            </summary>
            <param name="sender">
                The sender of the event.
            </param>
            <param name="e">
                Contains additional information for the event handler.
            </param>
        </member>
        <member name="M:IndiePortable.Collections.ViewObservableDynamicArray`2.AddItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the items in the specified <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
            <param name="items">
                The items that shall be added.
            </param>
            <returns>
                Returns the <typeparamref name="TOut" /> representations of the items in <paramref name="items" />.
            </returns>
        </member>
        <member name="M:IndiePortable.Collections.ViewObservableDynamicArray`2.RemoveItems(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes the items in the specified <see cref="T:System.Collections.Generic.IEnumerable`1" /> from the <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2" />.
            </summary>
            <param name="items">
                The items that shall be removed.
            </param>
            <returns>
                Returns the <typeparamref name="TOut" /> representations of the removed items.
            </returns>
        </member>
        <member name="M:IndiePortable.Collections.ViewObservableDynamicArray`2.ReplaceItems(System.Collections.Generic.IEnumerable{System.Tuple{`0,`0}},System.Collections.Generic.IList{`1}@,System.Collections.Generic.IList{`1}@)">
            <summary>
            Replaces the specified items.
            </summary>
            <param name="itemReplacements">
                The <typeparamref name="TIn" /> replacement tuples.
            </param>
            <param name="removedItems">
                The list containing the removed <typeparamref name="TOut" /> values.
            </param>
            <param name="addedItems">
                The list containing the added <typeparamref name="TOut" /> values.
            </param>
        </member>
        <member name="T:IndiePortable.Collections.ViewObservableDynamicArray`2.Enumerator">
            <summary>
            Provides an enumerator for the <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2" />.
            </summary>
            <remarks>
                Implements <see cref="T:System.Collections.Generic.IEnumerable`1" />, <see cref="T:System.Collections.IEnumerable" />, <see cref="T:System.IDisposable" /> explicitly.
            </remarks>
        </member>
        <member name="F:IndiePortable.Collections.ViewObservableDynamicArray`2.Enumerator.enumerable">
            <summary>
            The <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2" /> that shall be enumerated.
            </summary>
        </member>
        <member name="F:IndiePortable.Collections.ViewObservableDynamicArray`2.Enumerator.currentIndex">
            <summary>
            The current index of the <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2.Enumerator" />.
            </summary>
        </member>
        <member name="M:IndiePortable.Collections.ViewObservableDynamicArray`2.Enumerator.#ctor(IndiePortable.Collections.ViewObservableDynamicArray{`0,`1})">
            <summary>
            Initializes a new instance of the <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2.Enumerator" /> struct.
            </summary>
            <param name="enumerable">
                The <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2" /> that shall be enumerated.
            </param>
            <exception cref="T:System.ArgumentNullException">
                Thrown when <paramref name="enumerable" /> is <c>null</c>.
            </exception>
        </member>
        <member name="P:IndiePortable.Collections.ViewObservableDynamicArray`2.Enumerator.Current">
            <summary>
            Gets the current item of the <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2.Enumerator" />.
            </summary>
            <value>
                Contains the current item of the <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2.Enumerator" />.
            </value>
            <remarks>
                Implements <see cref="P:System.Collections.Generic.IEnumerator`1.Current" /> implicitly.
            </remarks>
        </member>
        <member name="P:IndiePortable.Collections.ViewObservableDynamicArray`2.Enumerator.System#Collections#IEnumerator#Current">
            <summary>
            Gets the current item of the <see cref="T:System.Collections.IEnumerator" />.
            </summary>
            <value>
                Contains the current item of the <see cref="T:System.Collections.IEnumerator" />.
            </value>
            <remarks>
                Implements <see cref="P:System.Collections.IEnumerator.Current" /> explicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ViewObservableDynamicArray`2.Enumerator.Dispose">
            <summary>
            Releases all resources reserved by the <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2.Enumerator" />.
            </summary>
            <remarks>
                Implements <see cref="M:System.IDisposable.Dispose" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ViewObservableDynamicArray`2.Enumerator.MoveNext">
            <summary>
            Advances the <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2.Enumerator" /> to the next item.
            </summary>
            <returns>
                Returns a value indicating whether the <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2.Enumerator" /> is inside of the <see cref="T:IndiePortable.Collections.ViewObservableDynamicArray`2" />.
            </returns>
            <remarks>
                Implements <see cref="M:System.Collections.IEnumerator.MoveNext" /> implicitly.
            </remarks>
        </member>
        <member name="M:IndiePortable.Collections.ViewObservableDynamicArray`2.Enumerator.Reset">
            <summary>
            Resets the <see cref="T:System.Collections.IEnumerator" />.
            </summary>
            <remarks>
                Implements <see cref="M:System.Collections.IEnumerator.Reset" /> implicitly.
            </remarks>
        </member>
    </members>
</doc>
